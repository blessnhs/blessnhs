// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Structure.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from Structure.proto</summary>
public static partial class StructureReflection {

  #region Descriptor
  /// <summary>File descriptor for Structure.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static StructureReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9TdHJ1Y3R1cmUucHJvdG8aCkVudW0ucHJvdG8iSAoMUm9vbVVzZXJJbmZv",
          "EhAKCHZhcl9uYW1lGAEgASgMEhEKCXZhcl9pbmRleBgCIAEoAxITCgtwaWN0",
          "dXJlX3VyaRgDIAEoDCJfCglSb29tSW5mbzISDgoGdmFyX2lkGAEgASgFEhAK",
          "CHZhcl9uYW1lGAIgASgMEhkKEXZhcl9jdXJyZW50X2NvdW50GAMgASgFEhUK",
          "DXZhcl9tYXhfY291bnQYBCABKAUirgEKBFJhbmsSEAoIdmFyX3JhbmsYASAB",
          "KAUSEAoIdmFyX25hbWUYAiABKAwSEQoJdmFyX2xldmVsGAMgASgFEhMKC3Zh",
          "cl9waWNfdXJpGAQgASgMEhEKCXZhcl9pbmRleBgFIAEoAxIPCgd2YXJfd2lu",
          "GAYgASgFEhAKCHZhcl9sb3NlGAcgASgFEhAKCHZhcl9kcmF3GAggASgFEhIK",
          "CnZhcl9jb250cnkYCSABKAwiMQoIUHJheUluZm8SEAoIdmFyX25hbWUYASAB",
          "KAwSEwoLdmFyX21lc3NhZ2UYAiABKAxCAkgB"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::EnumReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomUserInfo), global::RoomUserInfo.Parser, new[]{ "VarName", "VarIndex", "PictureUri" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomInfo2), global::RoomInfo2.Parser, new[]{ "VarId", "VarName", "VarCurrentCount", "VarMaxCount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Rank), global::Rank.Parser, new[]{ "VarRank", "VarName", "VarLevel", "VarPicUri", "VarIndex", "VarWin", "VarLose", "VarDraw", "VarContry" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PrayInfo), global::PrayInfo.Parser, new[]{ "VarName", "VarMessage" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class RoomUserInfo : pb::IMessage<RoomUserInfo> {
  private static readonly pb::MessageParser<RoomUserInfo> _parser = new pb::MessageParser<RoomUserInfo>(() => new RoomUserInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomUserInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StructureReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomUserInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomUserInfo(RoomUserInfo other) : this() {
    _hasBits0 = other._hasBits0;
    varName_ = other.varName_;
    varIndex_ = other.varIndex_;
    pictureUri_ = other.pictureUri_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomUserInfo Clone() {
    return new RoomUserInfo(this);
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 1;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_index" field.</summary>
  public const int VarIndexFieldNumber = 2;
  private readonly static long VarIndexDefaultValue = 0L;

  private long varIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarIndex {
    get { if ((_hasBits0 & 1) != 0) { return varIndex_; } else { return VarIndexDefaultValue; } }
    set {
      _hasBits0 |= 1;
      varIndex_ = value;
    }
  }
  /// <summary>Gets whether the "var_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarIndex {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "var_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarIndex() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "picture_uri" field.</summary>
  public const int PictureUriFieldNumber = 3;
  private readonly static pb::ByteString PictureUriDefaultValue = pb::ByteString.Empty;

  private pb::ByteString pictureUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString PictureUri {
    get { return pictureUri_ ?? PictureUriDefaultValue; }
    set {
      pictureUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "picture_uri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPictureUri {
    get { return pictureUri_ != null; }
  }
  /// <summary>Clears the value of the "picture_uri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPictureUri() {
    pictureUri_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomUserInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomUserInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (VarName != other.VarName) return false;
    if (VarIndex != other.VarIndex) return false;
    if (PictureUri != other.PictureUri) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarIndex) hash ^= VarIndex.GetHashCode();
    if (HasPictureUri) hash ^= PictureUri.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasVarName) {
      output.WriteRawTag(10);
      output.WriteBytes(VarName);
    }
    if (HasVarIndex) {
      output.WriteRawTag(16);
      output.WriteInt64(VarIndex);
    }
    if (HasPictureUri) {
      output.WriteRawTag(26);
      output.WriteBytes(PictureUri);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (HasVarIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarIndex);
    }
    if (HasPictureUri) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(PictureUri);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomUserInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarIndex) {
      VarIndex = other.VarIndex;
    }
    if (other.HasPictureUri) {
      PictureUri = other.PictureUri;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          VarName = input.ReadBytes();
          break;
        }
        case 16: {
          VarIndex = input.ReadInt64();
          break;
        }
        case 26: {
          PictureUri = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class RoomInfo2 : pb::IMessage<RoomInfo2> {
  private static readonly pb::MessageParser<RoomInfo2> _parser = new pb::MessageParser<RoomInfo2>(() => new RoomInfo2());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomInfo2> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StructureReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomInfo2() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomInfo2(RoomInfo2 other) : this() {
    _hasBits0 = other._hasBits0;
    varId_ = other.varId_;
    varName_ = other.varName_;
    varCurrentCount_ = other.varCurrentCount_;
    varMaxCount_ = other.varMaxCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomInfo2 Clone() {
    return new RoomInfo2(this);
  }

  /// <summary>Field number for the "var_id" field.</summary>
  public const int VarIdFieldNumber = 1;
  private readonly static int VarIdDefaultValue = 0;

  private int varId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarId {
    get { if ((_hasBits0 & 1) != 0) { return varId_; } else { return VarIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      varId_ = value;
    }
  }
  /// <summary>Gets whether the "var_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "var_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 2;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_current_count" field.</summary>
  public const int VarCurrentCountFieldNumber = 3;
  private readonly static int VarCurrentCountDefaultValue = 0;

  private int varCurrentCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarCurrentCount {
    get { if ((_hasBits0 & 2) != 0) { return varCurrentCount_; } else { return VarCurrentCountDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCurrentCount_ = value;
    }
  }
  /// <summary>Gets whether the "var_current_count" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCurrentCount {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_current_count" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCurrentCount() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_max_count" field.</summary>
  public const int VarMaxCountFieldNumber = 4;
  private readonly static int VarMaxCountDefaultValue = 0;

  private int varMaxCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarMaxCount {
    get { if ((_hasBits0 & 4) != 0) { return varMaxCount_; } else { return VarMaxCountDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varMaxCount_ = value;
    }
  }
  /// <summary>Gets whether the "var_max_count" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMaxCount {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_max_count" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMaxCount() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomInfo2);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomInfo2 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (VarId != other.VarId) return false;
    if (VarName != other.VarName) return false;
    if (VarCurrentCount != other.VarCurrentCount) return false;
    if (VarMaxCount != other.VarMaxCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasVarId) hash ^= VarId.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarCurrentCount) hash ^= VarCurrentCount.GetHashCode();
    if (HasVarMaxCount) hash ^= VarMaxCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasVarId) {
      output.WriteRawTag(8);
      output.WriteInt32(VarId);
    }
    if (HasVarName) {
      output.WriteRawTag(18);
      output.WriteBytes(VarName);
    }
    if (HasVarCurrentCount) {
      output.WriteRawTag(24);
      output.WriteInt32(VarCurrentCount);
    }
    if (HasVarMaxCount) {
      output.WriteRawTag(32);
      output.WriteInt32(VarMaxCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasVarId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarId);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (HasVarCurrentCount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarCurrentCount);
    }
    if (HasVarMaxCount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarMaxCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomInfo2 other) {
    if (other == null) {
      return;
    }
    if (other.HasVarId) {
      VarId = other.VarId;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarCurrentCount) {
      VarCurrentCount = other.VarCurrentCount;
    }
    if (other.HasVarMaxCount) {
      VarMaxCount = other.VarMaxCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          VarId = input.ReadInt32();
          break;
        }
        case 18: {
          VarName = input.ReadBytes();
          break;
        }
        case 24: {
          VarCurrentCount = input.ReadInt32();
          break;
        }
        case 32: {
          VarMaxCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Rank : pb::IMessage<Rank> {
  private static readonly pb::MessageParser<Rank> _parser = new pb::MessageParser<Rank>(() => new Rank());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Rank> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StructureReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Rank() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Rank(Rank other) : this() {
    _hasBits0 = other._hasBits0;
    varRank_ = other.varRank_;
    varName_ = other.varName_;
    varLevel_ = other.varLevel_;
    varPicUri_ = other.varPicUri_;
    varIndex_ = other.varIndex_;
    varWin_ = other.varWin_;
    varLose_ = other.varLose_;
    varDraw_ = other.varDraw_;
    varContry_ = other.varContry_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Rank Clone() {
    return new Rank(this);
  }

  /// <summary>Field number for the "var_rank" field.</summary>
  public const int VarRankFieldNumber = 1;
  private readonly static int VarRankDefaultValue = 0;

  private int varRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRank {
    get { if ((_hasBits0 & 1) != 0) { return varRank_; } else { return VarRankDefaultValue; } }
    set {
      _hasBits0 |= 1;
      varRank_ = value;
    }
  }
  /// <summary>Gets whether the "var_rank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRank {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "var_rank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRank() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 2;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_level" field.</summary>
  public const int VarLevelFieldNumber = 3;
  private readonly static int VarLevelDefaultValue = 0;

  private int varLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarLevel {
    get { if ((_hasBits0 & 2) != 0) { return varLevel_; } else { return VarLevelDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varLevel_ = value;
    }
  }
  /// <summary>Gets whether the "var_level" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarLevel {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_level" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarLevel() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_pic_uri" field.</summary>
  public const int VarPicUriFieldNumber = 4;
  private readonly static pb::ByteString VarPicUriDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varPicUri_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarPicUri {
    get { return varPicUri_ ?? VarPicUriDefaultValue; }
    set {
      varPicUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_pic_uri" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarPicUri {
    get { return varPicUri_ != null; }
  }
  /// <summary>Clears the value of the "var_pic_uri" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarPicUri() {
    varPicUri_ = null;
  }

  /// <summary>Field number for the "var_index" field.</summary>
  public const int VarIndexFieldNumber = 5;
  private readonly static long VarIndexDefaultValue = 0L;

  private long varIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarIndex {
    get { if ((_hasBits0 & 4) != 0) { return varIndex_; } else { return VarIndexDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varIndex_ = value;
    }
  }
  /// <summary>Gets whether the "var_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarIndex {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarIndex() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "var_win" field.</summary>
  public const int VarWinFieldNumber = 6;
  private readonly static int VarWinDefaultValue = 0;

  private int varWin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarWin {
    get { if ((_hasBits0 & 8) != 0) { return varWin_; } else { return VarWinDefaultValue; } }
    set {
      _hasBits0 |= 8;
      varWin_ = value;
    }
  }
  /// <summary>Gets whether the "var_win" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarWin {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "var_win" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarWin() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "var_lose" field.</summary>
  public const int VarLoseFieldNumber = 7;
  private readonly static int VarLoseDefaultValue = 0;

  private int varLose_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarLose {
    get { if ((_hasBits0 & 16) != 0) { return varLose_; } else { return VarLoseDefaultValue; } }
    set {
      _hasBits0 |= 16;
      varLose_ = value;
    }
  }
  /// <summary>Gets whether the "var_lose" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarLose {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "var_lose" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarLose() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "var_draw" field.</summary>
  public const int VarDrawFieldNumber = 8;
  private readonly static int VarDrawDefaultValue = 0;

  private int varDraw_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarDraw {
    get { if ((_hasBits0 & 32) != 0) { return varDraw_; } else { return VarDrawDefaultValue; } }
    set {
      _hasBits0 |= 32;
      varDraw_ = value;
    }
  }
  /// <summary>Gets whether the "var_draw" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarDraw {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "var_draw" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarDraw() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "var_contry" field.</summary>
  public const int VarContryFieldNumber = 9;
  private readonly static pb::ByteString VarContryDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varContry_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarContry {
    get { return varContry_ ?? VarContryDefaultValue; }
    set {
      varContry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_contry" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarContry {
    get { return varContry_ != null; }
  }
  /// <summary>Clears the value of the "var_contry" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarContry() {
    varContry_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Rank);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Rank other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (VarRank != other.VarRank) return false;
    if (VarName != other.VarName) return false;
    if (VarLevel != other.VarLevel) return false;
    if (VarPicUri != other.VarPicUri) return false;
    if (VarIndex != other.VarIndex) return false;
    if (VarWin != other.VarWin) return false;
    if (VarLose != other.VarLose) return false;
    if (VarDraw != other.VarDraw) return false;
    if (VarContry != other.VarContry) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasVarRank) hash ^= VarRank.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarLevel) hash ^= VarLevel.GetHashCode();
    if (HasVarPicUri) hash ^= VarPicUri.GetHashCode();
    if (HasVarIndex) hash ^= VarIndex.GetHashCode();
    if (HasVarWin) hash ^= VarWin.GetHashCode();
    if (HasVarLose) hash ^= VarLose.GetHashCode();
    if (HasVarDraw) hash ^= VarDraw.GetHashCode();
    if (HasVarContry) hash ^= VarContry.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasVarRank) {
      output.WriteRawTag(8);
      output.WriteInt32(VarRank);
    }
    if (HasVarName) {
      output.WriteRawTag(18);
      output.WriteBytes(VarName);
    }
    if (HasVarLevel) {
      output.WriteRawTag(24);
      output.WriteInt32(VarLevel);
    }
    if (HasVarPicUri) {
      output.WriteRawTag(34);
      output.WriteBytes(VarPicUri);
    }
    if (HasVarIndex) {
      output.WriteRawTag(40);
      output.WriteInt64(VarIndex);
    }
    if (HasVarWin) {
      output.WriteRawTag(48);
      output.WriteInt32(VarWin);
    }
    if (HasVarLose) {
      output.WriteRawTag(56);
      output.WriteInt32(VarLose);
    }
    if (HasVarDraw) {
      output.WriteRawTag(64);
      output.WriteInt32(VarDraw);
    }
    if (HasVarContry) {
      output.WriteRawTag(74);
      output.WriteBytes(VarContry);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasVarRank) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRank);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (HasVarLevel) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarLevel);
    }
    if (HasVarPicUri) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarPicUri);
    }
    if (HasVarIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarIndex);
    }
    if (HasVarWin) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarWin);
    }
    if (HasVarLose) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarLose);
    }
    if (HasVarDraw) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarDraw);
    }
    if (HasVarContry) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarContry);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Rank other) {
    if (other == null) {
      return;
    }
    if (other.HasVarRank) {
      VarRank = other.VarRank;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarLevel) {
      VarLevel = other.VarLevel;
    }
    if (other.HasVarPicUri) {
      VarPicUri = other.VarPicUri;
    }
    if (other.HasVarIndex) {
      VarIndex = other.VarIndex;
    }
    if (other.HasVarWin) {
      VarWin = other.VarWin;
    }
    if (other.HasVarLose) {
      VarLose = other.VarLose;
    }
    if (other.HasVarDraw) {
      VarDraw = other.VarDraw;
    }
    if (other.HasVarContry) {
      VarContry = other.VarContry;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          VarRank = input.ReadInt32();
          break;
        }
        case 18: {
          VarName = input.ReadBytes();
          break;
        }
        case 24: {
          VarLevel = input.ReadInt32();
          break;
        }
        case 34: {
          VarPicUri = input.ReadBytes();
          break;
        }
        case 40: {
          VarIndex = input.ReadInt64();
          break;
        }
        case 48: {
          VarWin = input.ReadInt32();
          break;
        }
        case 56: {
          VarLose = input.ReadInt32();
          break;
        }
        case 64: {
          VarDraw = input.ReadInt32();
          break;
        }
        case 74: {
          VarContry = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class PrayInfo : pb::IMessage<PrayInfo> {
  private static readonly pb::MessageParser<PrayInfo> _parser = new pb::MessageParser<PrayInfo>(() => new PrayInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PrayInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::StructureReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PrayInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PrayInfo(PrayInfo other) : this() {
    varName_ = other.varName_;
    varMessage_ = other.varMessage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PrayInfo Clone() {
    return new PrayInfo(this);
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 1;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 2;
  private readonly static pb::ByteString VarMessageDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarMessage {
    get { return varMessage_ ?? VarMessageDefaultValue; }
    set {
      varMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessage {
    get { return varMessage_ != null; }
  }
  /// <summary>Clears the value of the "var_message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessage() {
    varMessage_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PrayInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PrayInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (VarName != other.VarName) return false;
    if (VarMessage != other.VarMessage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarMessage) hash ^= VarMessage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasVarName) {
      output.WriteRawTag(10);
      output.WriteBytes(VarName);
    }
    if (HasVarMessage) {
      output.WriteRawTag(18);
      output.WriteBytes(VarMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (HasVarMessage) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarMessage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PrayInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarMessage) {
      VarMessage = other.VarMessage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          VarName = input.ReadBytes();
          break;
        }
        case 18: {
          VarMessage = input.ReadBytes();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
