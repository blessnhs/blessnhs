// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: CLI.GS.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from CLI.GS.proto</summary>
public static partial class CLIGSReflection {

  #region Descriptor
  /// <summary>File descriptor for CLI.GS.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CLIGSReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxDTEkuR1MucHJvdG8aCkVudW0ucHJvdG8aD1N0cnVjdHVyZS5wcm90byI4",
          "CgtWRVJTSU9OX1JFURIpCgJpZBgBIAEoDjIJLlBST1RPQ09MOhJJRF9QS1Rf",
          "VkVSU0lPTl9SRVEiVQoJTE9HSU5fUkVREicKAmlkGAEgASgOMgkuUFJPVE9D",
          "T0w6EElEX1BLVF9MT0dJTl9SRVESDgoGdmFyX2lkGAIgAigJEg8KB3Zhcl9w",
          "d2QYAyACKAkiUgoPQ1JFQVRFX1JPT01fUkVREi0KAmlkGAEgASgOMgkuUFJP",
          "VE9DT0w6FklEX1BLVF9DUkVBVEVfUk9PTV9SRVESEAoIdmFyX25hbWUYAiAC",
          "KAkiVwoORU5URVJfUk9PTV9SRVESLAoCaWQYASABKA4yCS5QUk9UT0NPTDoV",
          "SURfUEtUX0VOVEVSX1JPT01fUkVREhcKD3Zhcl9yb29tX251bWJlchgCIAIo",
          "BSJnCg5MRUFWRV9ST09NX1JFURIsCgJpZBgBIAEoDjIJLlBST1RPQ09MOhVJ",
          "RF9QS1RfTEVBVkVfUk9PTV9SRVESDgoGdmFyX2lkGAIgAigFEhcKD3Zhcl9y",
          "b29tX251bWJlchgDIAIoBSI8Cg1ST09NX0xJU1RfUkVREisKAmlkGAEgASgO",
          "MgkuUFJPVE9DT0w6FElEX1BLVF9ST09NX0xJU1RfUkVRIqUBChVST09NX1BB",
          "U1NfVEhST1VHSF9SRVESMwoCaWQYASABKA4yCS5QUk9UT0NPTDocSURfUEtU",
          "X1JPT01fUEFTU19USFJPVUdIX1JFURITCgt2YXJfbWVzc2FnZRgCIAIoCRIX",
          "Cg92YXJfbWVzc2FnZV9pbnQYAyACKAUSFwoPdmFyX3Jvb21fbnVtYmVyGAQg",
          "AigFEhAKCHZhcl90aW1lGAUgAigJIjYKCk5PVElDRV9SRVESKAoCaWQYASAB",
          "KA4yCS5QUk9UT0NPTDoRSURfUEtUX05PVElDRV9SRVEidAoSQklUTUFQX01F",
          "U1NBR0VfUkVREjAKAmlkGAEgASgOMgkuUFJPVE9DT0w6GUlEX1BLVF9CSVRN",
          "QVBfTUVTU0FHRV9SRVESEwoLdmFyX21lc3NhZ2UYAiADKAwSFwoPdmFyX3Jv",
          "b21fbnVtYmVyGAMgAigFInIKEUFVRElPX01FU1NBR0VfUkVREi8KAmlkGAEg",
          "ASgOMgkuUFJPVE9DT0w6GElEX1BLVF9BVURJT19NRVNTQUdFX1JFURITCgt2",
          "YXJfbWVzc2FnZRgCIAMoDBIXCg92YXJfcm9vbV9udW1iZXIYAyACKAUiQgoQ",
          "UFJBWV9NRVNTQUdFX1JFURIuCgJpZBgBIAEoDjIJLlBST1RPQ09MOhdJRF9Q",
          "S1RfUFJBWV9NRVNTQUdFX1JFUSJfChRQUkFZX01FU1NBR0VfUkVHX1JFURIy",
          "CgJpZBgBIAEoDjIJLlBST1RPQ09MOhtJRF9QS1RfUFJBWV9NRVNTQUdFX1JF",
          "R19SRVESEwoLdmFyX21lc3NhZ2UYAiABKAkiRQoHUU5BX1JFURIlCgJpZBgB",
          "IAEoDjIJLlBST1RPQ09MOg5JRF9QS1RfUU5BX1JFURITCgt2YXJfbWVzc2Fn",
          "ZRgCIAEoCSI8Cg1NQUlMX0xJU1RfUkVREisKAmlkGAEgASgOMgkuUFJPVE9D",
          "T0w6FElEX1BLVF9NQUlMX0xJU1RfUkVRQgJIAQ=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::EnumReflection.Descriptor, global::StructureReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::VERSION_REQ), global::VERSION_REQ.Parser, new[]{ "Id" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LOGIN_REQ), global::LOGIN_REQ.Parser, new[]{ "Id", "VarId", "VarPwd" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CREATE_ROOM_REQ), global::CREATE_ROOM_REQ.Parser, new[]{ "Id", "VarName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ENTER_ROOM_REQ), global::ENTER_ROOM_REQ.Parser, new[]{ "Id", "VarRoomNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LEAVE_ROOM_REQ), global::LEAVE_ROOM_REQ.Parser, new[]{ "Id", "VarId", "VarRoomNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ROOM_LIST_REQ), global::ROOM_LIST_REQ.Parser, new[]{ "Id" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ROOM_PASS_THROUGH_REQ), global::ROOM_PASS_THROUGH_REQ.Parser, new[]{ "Id", "VarMessage", "VarMessageInt", "VarRoomNumber", "VarTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NOTICE_REQ), global::NOTICE_REQ.Parser, new[]{ "Id" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BITMAP_MESSAGE_REQ), global::BITMAP_MESSAGE_REQ.Parser, new[]{ "Id", "VarMessage", "VarRoomNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AUDIO_MESSAGE_REQ), global::AUDIO_MESSAGE_REQ.Parser, new[]{ "Id", "VarMessage", "VarRoomNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PRAY_MESSAGE_REQ), global::PRAY_MESSAGE_REQ.Parser, new[]{ "Id" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PRAY_MESSAGE_REG_REQ), global::PRAY_MESSAGE_REG_REQ.Parser, new[]{ "Id", "VarMessage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QNA_REQ), global::QNA_REQ.Parser, new[]{ "Id", "VarMessage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MAIL_LIST_REQ), global::MAIL_LIST_REQ.Parser, new[]{ "Id" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class VERSION_REQ : pb::IMessage<VERSION_REQ> {
  private static readonly pb::MessageParser<VERSION_REQ> _parser = new pb::MessageParser<VERSION_REQ>(() => new VERSION_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VERSION_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERSION_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERSION_REQ(VERSION_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERSION_REQ Clone() {
    return new VERSION_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktVersionReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VERSION_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VERSION_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VERSION_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class LOGIN_REQ : pb::IMessage<LOGIN_REQ> {
  private static readonly pb::MessageParser<LOGIN_REQ> _parser = new pb::MessageParser<LOGIN_REQ>(() => new LOGIN_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LOGIN_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LOGIN_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LOGIN_REQ(LOGIN_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varId_ = other.varId_;
    varPwd_ = other.varPwd_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LOGIN_REQ Clone() {
    return new LOGIN_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktLoginReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_id" field.</summary>
  public const int VarIdFieldNumber = 2;
  private readonly static string VarIdDefaultValue = "";

  private string varId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarId {
    get { return varId_ ?? VarIdDefaultValue; }
    set {
      varId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarId {
    get { return varId_ != null; }
  }
  /// <summary>Clears the value of the "var_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarId() {
    varId_ = null;
  }

  /// <summary>Field number for the "var_pwd" field.</summary>
  public const int VarPwdFieldNumber = 3;
  private readonly static string VarPwdDefaultValue = "";

  private string varPwd_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarPwd {
    get { return varPwd_ ?? VarPwdDefaultValue; }
    set {
      varPwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_pwd" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarPwd {
    get { return varPwd_ != null; }
  }
  /// <summary>Clears the value of the "var_pwd" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarPwd() {
    varPwd_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LOGIN_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LOGIN_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarId != other.VarId) return false;
    if (VarPwd != other.VarPwd) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarId) hash ^= VarId.GetHashCode();
    if (HasVarPwd) hash ^= VarPwd.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarId) {
      output.WriteRawTag(18);
      output.WriteString(VarId);
    }
    if (HasVarPwd) {
      output.WriteRawTag(26);
      output.WriteString(VarPwd);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarId);
    }
    if (HasVarPwd) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarPwd);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LOGIN_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarId) {
      VarId = other.VarId;
    }
    if (other.HasVarPwd) {
      VarPwd = other.VarPwd;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarId = input.ReadString();
          break;
        }
        case 26: {
          VarPwd = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CREATE_ROOM_REQ : pb::IMessage<CREATE_ROOM_REQ> {
  private static readonly pb::MessageParser<CREATE_ROOM_REQ> _parser = new pb::MessageParser<CREATE_ROOM_REQ>(() => new CREATE_ROOM_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CREATE_ROOM_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CREATE_ROOM_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CREATE_ROOM_REQ(CREATE_ROOM_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varName_ = other.varName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CREATE_ROOM_REQ Clone() {
    return new CREATE_ROOM_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktCreateRoomReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 2;
  private readonly static string VarNameDefaultValue = "";

  private string varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CREATE_ROOM_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CREATE_ROOM_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarName != other.VarName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarName) {
      output.WriteRawTag(18);
      output.WriteString(VarName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CREATE_ROOM_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarName = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ENTER_ROOM_REQ : pb::IMessage<ENTER_ROOM_REQ> {
  private static readonly pb::MessageParser<ENTER_ROOM_REQ> _parser = new pb::MessageParser<ENTER_ROOM_REQ>(() => new ENTER_ROOM_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ENTER_ROOM_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENTER_ROOM_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENTER_ROOM_REQ(ENTER_ROOM_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varRoomNumber_ = other.varRoomNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENTER_ROOM_REQ Clone() {
    return new ENTER_ROOM_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktEnterRoomReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_room_number" field.</summary>
  public const int VarRoomNumberFieldNumber = 2;
  private readonly static int VarRoomNumberDefaultValue = 0;

  private int varRoomNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomNumber {
    get { if ((_hasBits0 & 2) != 0) { return varRoomNumber_; } else { return VarRoomNumberDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varRoomNumber_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomNumber {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_room_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomNumber() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ENTER_ROOM_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ENTER_ROOM_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarRoomNumber != other.VarRoomNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarRoomNumber) hash ^= VarRoomNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarRoomNumber) {
      output.WriteRawTag(16);
      output.WriteInt32(VarRoomNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarRoomNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ENTER_ROOM_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarRoomNumber) {
      VarRoomNumber = other.VarRoomNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarRoomNumber = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class LEAVE_ROOM_REQ : pb::IMessage<LEAVE_ROOM_REQ> {
  private static readonly pb::MessageParser<LEAVE_ROOM_REQ> _parser = new pb::MessageParser<LEAVE_ROOM_REQ>(() => new LEAVE_ROOM_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LEAVE_ROOM_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LEAVE_ROOM_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LEAVE_ROOM_REQ(LEAVE_ROOM_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varId_ = other.varId_;
    varRoomNumber_ = other.varRoomNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LEAVE_ROOM_REQ Clone() {
    return new LEAVE_ROOM_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktLeaveRoomReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_id" field.</summary>
  public const int VarIdFieldNumber = 2;
  private readonly static int VarIdDefaultValue = 0;

  private int varId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarId {
    get { if ((_hasBits0 & 2) != 0) { return varId_; } else { return VarIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varId_ = value;
    }
  }
  /// <summary>Gets whether the "var_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_room_number" field.</summary>
  public const int VarRoomNumberFieldNumber = 3;
  private readonly static int VarRoomNumberDefaultValue = 0;

  private int varRoomNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomNumber {
    get { if ((_hasBits0 & 4) != 0) { return varRoomNumber_; } else { return VarRoomNumberDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varRoomNumber_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomNumber {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_room_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomNumber() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LEAVE_ROOM_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LEAVE_ROOM_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarId != other.VarId) return false;
    if (VarRoomNumber != other.VarRoomNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarId) hash ^= VarId.GetHashCode();
    if (HasVarRoomNumber) hash ^= VarRoomNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarId) {
      output.WriteRawTag(16);
      output.WriteInt32(VarId);
    }
    if (HasVarRoomNumber) {
      output.WriteRawTag(24);
      output.WriteInt32(VarRoomNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarId);
    }
    if (HasVarRoomNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LEAVE_ROOM_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarId) {
      VarId = other.VarId;
    }
    if (other.HasVarRoomNumber) {
      VarRoomNumber = other.VarRoomNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarId = input.ReadInt32();
          break;
        }
        case 24: {
          VarRoomNumber = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ROOM_LIST_REQ : pb::IMessage<ROOM_LIST_REQ> {
  private static readonly pb::MessageParser<ROOM_LIST_REQ> _parser = new pb::MessageParser<ROOM_LIST_REQ>(() => new ROOM_LIST_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ROOM_LIST_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_LIST_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_LIST_REQ(ROOM_LIST_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_LIST_REQ Clone() {
    return new ROOM_LIST_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktRoomListReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ROOM_LIST_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ROOM_LIST_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ROOM_LIST_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class ROOM_PASS_THROUGH_REQ : pb::IMessage<ROOM_PASS_THROUGH_REQ> {
  private static readonly pb::MessageParser<ROOM_PASS_THROUGH_REQ> _parser = new pb::MessageParser<ROOM_PASS_THROUGH_REQ>(() => new ROOM_PASS_THROUGH_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ROOM_PASS_THROUGH_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_PASS_THROUGH_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_PASS_THROUGH_REQ(ROOM_PASS_THROUGH_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varMessage_ = other.varMessage_;
    varMessageInt_ = other.varMessageInt_;
    varRoomNumber_ = other.varRoomNumber_;
    varTime_ = other.varTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_PASS_THROUGH_REQ Clone() {
    return new ROOM_PASS_THROUGH_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktRoomPassThroughReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 2;
  private readonly static string VarMessageDefaultValue = "";

  private string varMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMessage {
    get { return varMessage_ ?? VarMessageDefaultValue; }
    set {
      varMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessage {
    get { return varMessage_ != null; }
  }
  /// <summary>Clears the value of the "var_message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessage() {
    varMessage_ = null;
  }

  /// <summary>Field number for the "var_message_int" field.</summary>
  public const int VarMessageIntFieldNumber = 3;
  private readonly static int VarMessageIntDefaultValue = 0;

  private int varMessageInt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarMessageInt {
    get { if ((_hasBits0 & 2) != 0) { return varMessageInt_; } else { return VarMessageIntDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varMessageInt_ = value;
    }
  }
  /// <summary>Gets whether the "var_message_int" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessageInt {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_message_int" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessageInt() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_room_number" field.</summary>
  public const int VarRoomNumberFieldNumber = 4;
  private readonly static int VarRoomNumberDefaultValue = 0;

  private int varRoomNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomNumber {
    get { if ((_hasBits0 & 4) != 0) { return varRoomNumber_; } else { return VarRoomNumberDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varRoomNumber_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomNumber {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_room_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomNumber() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "var_time" field.</summary>
  public const int VarTimeFieldNumber = 5;
  private readonly static string VarTimeDefaultValue = "";

  private string varTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarTime {
    get { return varTime_ ?? VarTimeDefaultValue; }
    set {
      varTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_time" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarTime {
    get { return varTime_ != null; }
  }
  /// <summary>Clears the value of the "var_time" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarTime() {
    varTime_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ROOM_PASS_THROUGH_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ROOM_PASS_THROUGH_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarMessage != other.VarMessage) return false;
    if (VarMessageInt != other.VarMessageInt) return false;
    if (VarRoomNumber != other.VarRoomNumber) return false;
    if (VarTime != other.VarTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarMessage) hash ^= VarMessage.GetHashCode();
    if (HasVarMessageInt) hash ^= VarMessageInt.GetHashCode();
    if (HasVarRoomNumber) hash ^= VarRoomNumber.GetHashCode();
    if (HasVarTime) hash ^= VarTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarMessage) {
      output.WriteRawTag(18);
      output.WriteString(VarMessage);
    }
    if (HasVarMessageInt) {
      output.WriteRawTag(24);
      output.WriteInt32(VarMessageInt);
    }
    if (HasVarRoomNumber) {
      output.WriteRawTag(32);
      output.WriteInt32(VarRoomNumber);
    }
    if (HasVarTime) {
      output.WriteRawTag(42);
      output.WriteString(VarTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMessage);
    }
    if (HasVarMessageInt) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarMessageInt);
    }
    if (HasVarRoomNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomNumber);
    }
    if (HasVarTime) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ROOM_PASS_THROUGH_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarMessage) {
      VarMessage = other.VarMessage;
    }
    if (other.HasVarMessageInt) {
      VarMessageInt = other.VarMessageInt;
    }
    if (other.HasVarRoomNumber) {
      VarRoomNumber = other.VarRoomNumber;
    }
    if (other.HasVarTime) {
      VarTime = other.VarTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarMessage = input.ReadString();
          break;
        }
        case 24: {
          VarMessageInt = input.ReadInt32();
          break;
        }
        case 32: {
          VarRoomNumber = input.ReadInt32();
          break;
        }
        case 42: {
          VarTime = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class NOTICE_REQ : pb::IMessage<NOTICE_REQ> {
  private static readonly pb::MessageParser<NOTICE_REQ> _parser = new pb::MessageParser<NOTICE_REQ>(() => new NOTICE_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NOTICE_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NOTICE_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NOTICE_REQ(NOTICE_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NOTICE_REQ Clone() {
    return new NOTICE_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktNoticeReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NOTICE_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NOTICE_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NOTICE_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class BITMAP_MESSAGE_REQ : pb::IMessage<BITMAP_MESSAGE_REQ> {
  private static readonly pb::MessageParser<BITMAP_MESSAGE_REQ> _parser = new pb::MessageParser<BITMAP_MESSAGE_REQ>(() => new BITMAP_MESSAGE_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BITMAP_MESSAGE_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BITMAP_MESSAGE_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BITMAP_MESSAGE_REQ(BITMAP_MESSAGE_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varMessage_ = other.varMessage_.Clone();
    varRoomNumber_ = other.varRoomNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BITMAP_MESSAGE_REQ Clone() {
    return new BITMAP_MESSAGE_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktBitmapMessageReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 2;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_varMessage_codec
      = pb::FieldCodec.ForBytes(18);
  private readonly pbc::RepeatedField<pb::ByteString> varMessage_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> VarMessage {
    get { return varMessage_; }
  }

  /// <summary>Field number for the "var_room_number" field.</summary>
  public const int VarRoomNumberFieldNumber = 3;
  private readonly static int VarRoomNumberDefaultValue = 0;

  private int varRoomNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomNumber {
    get { if ((_hasBits0 & 2) != 0) { return varRoomNumber_; } else { return VarRoomNumberDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varRoomNumber_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomNumber {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_room_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomNumber() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BITMAP_MESSAGE_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BITMAP_MESSAGE_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!varMessage_.Equals(other.varMessage_)) return false;
    if (VarRoomNumber != other.VarRoomNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    hash ^= varMessage_.GetHashCode();
    if (HasVarRoomNumber) hash ^= VarRoomNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    varMessage_.WriteTo(output, _repeated_varMessage_codec);
    if (HasVarRoomNumber) {
      output.WriteRawTag(24);
      output.WriteInt32(VarRoomNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    size += varMessage_.CalculateSize(_repeated_varMessage_codec);
    if (HasVarRoomNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BITMAP_MESSAGE_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    varMessage_.Add(other.varMessage_);
    if (other.HasVarRoomNumber) {
      VarRoomNumber = other.VarRoomNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          varMessage_.AddEntriesFrom(input, _repeated_varMessage_codec);
          break;
        }
        case 24: {
          VarRoomNumber = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AUDIO_MESSAGE_REQ : pb::IMessage<AUDIO_MESSAGE_REQ> {
  private static readonly pb::MessageParser<AUDIO_MESSAGE_REQ> _parser = new pb::MessageParser<AUDIO_MESSAGE_REQ>(() => new AUDIO_MESSAGE_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AUDIO_MESSAGE_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AUDIO_MESSAGE_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AUDIO_MESSAGE_REQ(AUDIO_MESSAGE_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varMessage_ = other.varMessage_.Clone();
    varRoomNumber_ = other.varRoomNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AUDIO_MESSAGE_REQ Clone() {
    return new AUDIO_MESSAGE_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktAudioMessageReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 2;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_varMessage_codec
      = pb::FieldCodec.ForBytes(18);
  private readonly pbc::RepeatedField<pb::ByteString> varMessage_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> VarMessage {
    get { return varMessage_; }
  }

  /// <summary>Field number for the "var_room_number" field.</summary>
  public const int VarRoomNumberFieldNumber = 3;
  private readonly static int VarRoomNumberDefaultValue = 0;

  private int varRoomNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomNumber {
    get { if ((_hasBits0 & 2) != 0) { return varRoomNumber_; } else { return VarRoomNumberDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varRoomNumber_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_number" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomNumber {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_room_number" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomNumber() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AUDIO_MESSAGE_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AUDIO_MESSAGE_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!varMessage_.Equals(other.varMessage_)) return false;
    if (VarRoomNumber != other.VarRoomNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    hash ^= varMessage_.GetHashCode();
    if (HasVarRoomNumber) hash ^= VarRoomNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    varMessage_.WriteTo(output, _repeated_varMessage_codec);
    if (HasVarRoomNumber) {
      output.WriteRawTag(24);
      output.WriteInt32(VarRoomNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    size += varMessage_.CalculateSize(_repeated_varMessage_codec);
    if (HasVarRoomNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AUDIO_MESSAGE_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    varMessage_.Add(other.varMessage_);
    if (other.HasVarRoomNumber) {
      VarRoomNumber = other.VarRoomNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          varMessage_.AddEntriesFrom(input, _repeated_varMessage_codec);
          break;
        }
        case 24: {
          VarRoomNumber = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PRAY_MESSAGE_REQ : pb::IMessage<PRAY_MESSAGE_REQ> {
  private static readonly pb::MessageParser<PRAY_MESSAGE_REQ> _parser = new pb::MessageParser<PRAY_MESSAGE_REQ>(() => new PRAY_MESSAGE_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PRAY_MESSAGE_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REQ(PRAY_MESSAGE_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REQ Clone() {
    return new PRAY_MESSAGE_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktPrayMessageReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PRAY_MESSAGE_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PRAY_MESSAGE_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PRAY_MESSAGE_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class PRAY_MESSAGE_REG_REQ : pb::IMessage<PRAY_MESSAGE_REG_REQ> {
  private static readonly pb::MessageParser<PRAY_MESSAGE_REG_REQ> _parser = new pb::MessageParser<PRAY_MESSAGE_REG_REQ>(() => new PRAY_MESSAGE_REG_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PRAY_MESSAGE_REG_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REG_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REG_REQ(PRAY_MESSAGE_REG_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varMessage_ = other.varMessage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REG_REQ Clone() {
    return new PRAY_MESSAGE_REG_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktPrayMessageRegReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 2;
  private readonly static string VarMessageDefaultValue = "";

  private string varMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMessage {
    get { return varMessage_ ?? VarMessageDefaultValue; }
    set {
      varMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessage {
    get { return varMessage_ != null; }
  }
  /// <summary>Clears the value of the "var_message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessage() {
    varMessage_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PRAY_MESSAGE_REG_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PRAY_MESSAGE_REG_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarMessage != other.VarMessage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarMessage) hash ^= VarMessage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarMessage) {
      output.WriteRawTag(18);
      output.WriteString(VarMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMessage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PRAY_MESSAGE_REG_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarMessage) {
      VarMessage = other.VarMessage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarMessage = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class QNA_REQ : pb::IMessage<QNA_REQ> {
  private static readonly pb::MessageParser<QNA_REQ> _parser = new pb::MessageParser<QNA_REQ>(() => new QNA_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<QNA_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QNA_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QNA_REQ(QNA_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varMessage_ = other.varMessage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QNA_REQ Clone() {
    return new QNA_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktQnaReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 2;
  private readonly static string VarMessageDefaultValue = "";

  private string varMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string VarMessage {
    get { return varMessage_ ?? VarMessageDefaultValue; }
    set {
      varMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessage {
    get { return varMessage_ != null; }
  }
  /// <summary>Clears the value of the "var_message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessage() {
    varMessage_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as QNA_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(QNA_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarMessage != other.VarMessage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarMessage) hash ^= VarMessage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarMessage) {
      output.WriteRawTag(18);
      output.WriteString(VarMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VarMessage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(QNA_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarMessage) {
      VarMessage = other.VarMessage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarMessage = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class MAIL_LIST_REQ : pb::IMessage<MAIL_LIST_REQ> {
  private static readonly pb::MessageParser<MAIL_LIST_REQ> _parser = new pb::MessageParser<MAIL_LIST_REQ>(() => new MAIL_LIST_REQ());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MAIL_LIST_REQ> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CLIGSReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MAIL_LIST_REQ() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MAIL_LIST_REQ(MAIL_LIST_REQ other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MAIL_LIST_REQ Clone() {
    return new MAIL_LIST_REQ(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktMailListReq;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MAIL_LIST_REQ);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MAIL_LIST_REQ other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MAIL_LIST_REQ other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
