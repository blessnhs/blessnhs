// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GS.CLI.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from GS.CLI.proto</summary>
public static partial class GSCLIReflection {

  #region Descriptor
  /// <summary>File descriptor for GS.CLI.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GSCLIReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxHUy5DTEkucHJvdG8aCkVudW0ucHJvdG8aD1N0cnVjdHVyZS5wcm90byJr",
          "CgtWRVJTSU9OX1JFUxIpCgJpZBgBIAEoDjIJLlBST1RPQ09MOhJJRF9QS1Rf",
          "VkVSU0lPTl9SRVMSEwoLdmFyX3ZlcnNpb24YAiABKAISHAoIdmFyX2NvZGUY",
          "AyABKA4yCi5FcnJvckNvZGUiiwEKCUxPR0lOX1JFUxInCgJpZBgBIAEoDjIJ",
          "LlBST1RPQ09MOhBJRF9QS1RfTE9HSU5fUkVTEhwKCHZhcl9jb2RlGAIgASgO",
          "MgouRXJyb3JDb2RlEhEKCXZhcl9pbmRleBgDIAEoAxISCgp2YXJfbG9jYWxl",
          "GAQgASgMEhAKCHZhcl9uYW1lGAUgASgMIoUBCg9DUkVBVEVfUk9PTV9SRVMS",
          "LQoCaWQYASABKA4yCS5QUk9UT0NPTDoWSURfUEtUX0NSRUFURV9ST09NX1JF",
          "UxIQCgh2YXJfbmFtZRgCIAEoDBITCgt2YXJfcm9vbV9pZBgDIAEoBRIcCgh2",
          "YXJfY29kZRgEIAEoDjIKLkVycm9yQ29kZSKDAQoORU5URVJfUk9PTV9SRVMS",
          "LAoCaWQYASABKA4yCS5QUk9UT0NPTDoVSURfUEtUX0VOVEVSX1JPT01fUkVT",
          "EhAKCHZhcl9uYW1lGAIgASgMEhMKC3Zhcl9yb29tX2lkGAMgASgFEhwKCHZh",
          "cl9jb2RlGAQgASgOMgouRXJyb3JDb2RlIo4BChRORVdfVVNFUl9JTl9ST09N",
          "X05UWRIyCgJpZBgBIAEoDjIJLlBST1RPQ09MOhtJRF9QS1RfTkVXX1VTRVJf",
          "SU5fUk9PTV9OVFkSJAoNdmFyX3Jvb21fdXNlchgCIAEoCzINLlJvb21Vc2Vy",
          "SW5mbxIcCgh2YXJfY29kZRgDIAEoDjIKLkVycm9yQ29kZSKBAQoOTEVBVkVf",
          "Uk9PTV9SRVMSLAoCaWQYASABKA4yCS5QUk9UT0NPTDoVSURfUEtUX0xFQVZF",
          "X1JPT01fUkVTEhAKCHZhcl9uYW1lGAIgASgMEhwKCHZhcl9jb2RlGAMgASgO",
          "MgouRXJyb3JDb2RlEhEKCXZhcl9pbmRleBgEIAEoAyJ9Cg1ST09NX0xJU1Rf",
          "UkVTEisKAmlkGAEgASgOMgkuUFJPVE9DT0w6FElEX1BLVF9ST09NX0xJU1Rf",
          "UkVTEhwKCHZhcl9jb2RlGAIgASgOMgouRXJyb3JDb2RlEiEKDXZhcl9yb29t",
          "X2xpc3QYAyADKAsyCi5Sb29tSW5mbzIiqgEKFVJPT01fUEFTU19USFJPVUdI",
          "X1JFUxIzCgJpZBgBIAEoDjIJLlBST1RPQ09MOhxJRF9QS1RfUk9PTV9QQVNT",
          "X1RIUk9VR0hfUkVTEhwKCHZhcl9jb2RlGAIgASgOMgouRXJyb3JDb2RlEhAK",
          "CHZhcl9uYW1lGAMgAigMEhMKC3Zhcl9tZXNzYWdlGAQgAigMEhcKD3Zhcl9t",
          "ZXNzYWdlX2ludBgFIAIoBSJLCgpOT1RJQ0VfUkVTEigKAmlkGAEgASgOMgku",
          "UFJPVE9DT0w6EUlEX1BLVF9OT1RJQ0VfUkVTEhMKC3Zhcl9tZXNzYWdlGAIg",
          "AigMIosBChJCSVRNQVBfTUVTU0FHRV9SRVMSMAoCaWQYASABKA4yCS5QUk9U",
          "T0NPTDoZSURfUEtUX0JJVE1BUF9NRVNTQUdFX1JFUxIcCgh2YXJfY29kZRgC",
          "IAEoDjIKLkVycm9yQ29kZRITCgt2YXJfbWVzc2FnZRgDIAMoDBIQCgh2YXJf",
          "bmFtZRgEIAEoDCKJAQoRQVVESU9fTUVTU0FHRV9SRVMSLwoCaWQYASABKA4y",
          "CS5QUk9UT0NPTDoYSURfUEtUX0FVRElPX01FU1NBR0VfUkVTEhwKCHZhcl9j",
          "b2RlGAIgASgOMgouRXJyb3JDb2RlEhMKC3Zhcl9tZXNzYWdlGAMgAygMEhAK",
          "CHZhcl9uYW1lGAQgASgMInUKEFBSQVlfTUVTU0FHRV9SRVMSLgoCaWQYASAB",
          "KA4yCS5QUk9UT0NPTDoXSURfUEtUX1BSQVlfTUVTU0FHRV9SRVMSHAoIdmFy",
          "X2NvZGUYAiABKA4yCi5FcnJvckNvZGUSEwoLdmFyX21lc3NhZ2UYAyABKAwi",
          "ZwoUUFJBWV9NRVNTQUdFX1JFR19SRVMSMgoCaWQYASABKA4yCS5QUk9UT0NP",
          "TDobSURfUEtUX1BSQVlfTUVTU0FHRV9SRUdfUkVTEhsKCHZhcl9saXN0GAIg",
          "AygLMgkuUHJheUluZm9CAkgB"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::EnumReflection.Descriptor, global::StructureReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::VERSION_RES), global::VERSION_RES.Parser, new[]{ "Id", "VarVersion", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LOGIN_RES), global::LOGIN_RES.Parser, new[]{ "Id", "VarCode", "VarIndex", "VarLocale", "VarName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CREATE_ROOM_RES), global::CREATE_ROOM_RES.Parser, new[]{ "Id", "VarName", "VarRoomId", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ENTER_ROOM_RES), global::ENTER_ROOM_RES.Parser, new[]{ "Id", "VarName", "VarRoomId", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NEW_USER_IN_ROOM_NTY), global::NEW_USER_IN_ROOM_NTY.Parser, new[]{ "Id", "VarRoomUser", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LEAVE_ROOM_RES), global::LEAVE_ROOM_RES.Parser, new[]{ "Id", "VarName", "VarCode", "VarIndex" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ROOM_LIST_RES), global::ROOM_LIST_RES.Parser, new[]{ "Id", "VarCode", "VarRoomList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ROOM_PASS_THROUGH_RES), global::ROOM_PASS_THROUGH_RES.Parser, new[]{ "Id", "VarCode", "VarName", "VarMessage", "VarMessageInt" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NOTICE_RES), global::NOTICE_RES.Parser, new[]{ "Id", "VarMessage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BITMAP_MESSAGE_RES), global::BITMAP_MESSAGE_RES.Parser, new[]{ "Id", "VarCode", "VarMessage", "VarName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AUDIO_MESSAGE_RES), global::AUDIO_MESSAGE_RES.Parser, new[]{ "Id", "VarCode", "VarMessage", "VarName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PRAY_MESSAGE_RES), global::PRAY_MESSAGE_RES.Parser, new[]{ "Id", "VarCode", "VarMessage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PRAY_MESSAGE_REG_RES), global::PRAY_MESSAGE_REG_RES.Parser, new[]{ "Id", "VarList" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class VERSION_RES : pb::IMessage<VERSION_RES> {
  private static readonly pb::MessageParser<VERSION_RES> _parser = new pb::MessageParser<VERSION_RES>(() => new VERSION_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VERSION_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERSION_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERSION_RES(VERSION_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varVersion_ = other.varVersion_;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERSION_RES Clone() {
    return new VERSION_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktVersionRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_version" field.</summary>
  public const int VarVersionFieldNumber = 2;
  private readonly static float VarVersionDefaultValue = 0F;

  private float varVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float VarVersion {
    get { if ((_hasBits0 & 2) != 0) { return varVersion_; } else { return VarVersionDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varVersion_ = value;
    }
  }
  /// <summary>Gets whether the "var_version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarVersion {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarVersion() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 3;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 4) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VERSION_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VERSION_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VarVersion, other.VarVersion)) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarVersion) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VarVersion);
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarVersion) {
      output.WriteRawTag(21);
      output.WriteFloat(VarVersion);
    }
    if (HasVarCode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarVersion) {
      size += 1 + 4;
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VERSION_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarVersion) {
      VarVersion = other.VarVersion;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 21: {
          VarVersion = input.ReadFloat();
          break;
        }
        case 24: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class LOGIN_RES : pb::IMessage<LOGIN_RES> {
  private static readonly pb::MessageParser<LOGIN_RES> _parser = new pb::MessageParser<LOGIN_RES>(() => new LOGIN_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LOGIN_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LOGIN_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LOGIN_RES(LOGIN_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varIndex_ = other.varIndex_;
    varLocale_ = other.varLocale_;
    varName_ = other.varName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LOGIN_RES Clone() {
    return new LOGIN_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktLoginRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_index" field.</summary>
  public const int VarIndexFieldNumber = 3;
  private readonly static long VarIndexDefaultValue = 0L;

  private long varIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarIndex {
    get { if ((_hasBits0 & 4) != 0) { return varIndex_; } else { return VarIndexDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varIndex_ = value;
    }
  }
  /// <summary>Gets whether the "var_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarIndex {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarIndex() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "var_locale" field.</summary>
  public const int VarLocaleFieldNumber = 4;
  private readonly static pb::ByteString VarLocaleDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varLocale_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarLocale {
    get { return varLocale_ ?? VarLocaleDefaultValue; }
    set {
      varLocale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_locale" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarLocale {
    get { return varLocale_ != null; }
  }
  /// <summary>Clears the value of the "var_locale" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarLocale() {
    varLocale_ = null;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 5;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LOGIN_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LOGIN_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if (VarIndex != other.VarIndex) return false;
    if (VarLocale != other.VarLocale) return false;
    if (VarName != other.VarName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarIndex) hash ^= VarIndex.GetHashCode();
    if (HasVarLocale) hash ^= VarLocale.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarIndex) {
      output.WriteRawTag(24);
      output.WriteInt64(VarIndex);
    }
    if (HasVarLocale) {
      output.WriteRawTag(34);
      output.WriteBytes(VarLocale);
    }
    if (HasVarName) {
      output.WriteRawTag(42);
      output.WriteBytes(VarName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarIndex);
    }
    if (HasVarLocale) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarLocale);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LOGIN_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarIndex) {
      VarIndex = other.VarIndex;
    }
    if (other.HasVarLocale) {
      VarLocale = other.VarLocale;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 24: {
          VarIndex = input.ReadInt64();
          break;
        }
        case 34: {
          VarLocale = input.ReadBytes();
          break;
        }
        case 42: {
          VarName = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class CREATE_ROOM_RES : pb::IMessage<CREATE_ROOM_RES> {
  private static readonly pb::MessageParser<CREATE_ROOM_RES> _parser = new pb::MessageParser<CREATE_ROOM_RES>(() => new CREATE_ROOM_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CREATE_ROOM_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CREATE_ROOM_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CREATE_ROOM_RES(CREATE_ROOM_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varName_ = other.varName_;
    varRoomId_ = other.varRoomId_;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CREATE_ROOM_RES Clone() {
    return new CREATE_ROOM_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktCreateRoomRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 2;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_room_id" field.</summary>
  public const int VarRoomIdFieldNumber = 3;
  private readonly static int VarRoomIdDefaultValue = 0;

  private int varRoomId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomId {
    get { if ((_hasBits0 & 2) != 0) { return varRoomId_; } else { return VarRoomIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varRoomId_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_room_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 4;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 4) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CREATE_ROOM_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CREATE_ROOM_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarName != other.VarName) return false;
    if (VarRoomId != other.VarRoomId) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarRoomId) hash ^= VarRoomId.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarName) {
      output.WriteRawTag(18);
      output.WriteBytes(VarName);
    }
    if (HasVarRoomId) {
      output.WriteRawTag(24);
      output.WriteInt32(VarRoomId);
    }
    if (HasVarCode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (HasVarRoomId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomId);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CREATE_ROOM_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarRoomId) {
      VarRoomId = other.VarRoomId;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarName = input.ReadBytes();
          break;
        }
        case 24: {
          VarRoomId = input.ReadInt32();
          break;
        }
        case 32: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class ENTER_ROOM_RES : pb::IMessage<ENTER_ROOM_RES> {
  private static readonly pb::MessageParser<ENTER_ROOM_RES> _parser = new pb::MessageParser<ENTER_ROOM_RES>(() => new ENTER_ROOM_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ENTER_ROOM_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENTER_ROOM_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENTER_ROOM_RES(ENTER_ROOM_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varName_ = other.varName_;
    varRoomId_ = other.varRoomId_;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENTER_ROOM_RES Clone() {
    return new ENTER_ROOM_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktEnterRoomRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 2;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_room_id" field.</summary>
  public const int VarRoomIdFieldNumber = 3;
  private readonly static int VarRoomIdDefaultValue = 0;

  private int varRoomId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomId {
    get { if ((_hasBits0 & 2) != 0) { return varRoomId_; } else { return VarRoomIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varRoomId_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_room_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 4;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 4) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ENTER_ROOM_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ENTER_ROOM_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarName != other.VarName) return false;
    if (VarRoomId != other.VarRoomId) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarRoomId) hash ^= VarRoomId.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarName) {
      output.WriteRawTag(18);
      output.WriteBytes(VarName);
    }
    if (HasVarRoomId) {
      output.WriteRawTag(24);
      output.WriteInt32(VarRoomId);
    }
    if (HasVarCode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (HasVarRoomId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomId);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ENTER_ROOM_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarRoomId) {
      VarRoomId = other.VarRoomId;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarName = input.ReadBytes();
          break;
        }
        case 24: {
          VarRoomId = input.ReadInt32();
          break;
        }
        case 32: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class NEW_USER_IN_ROOM_NTY : pb::IMessage<NEW_USER_IN_ROOM_NTY> {
  private static readonly pb::MessageParser<NEW_USER_IN_ROOM_NTY> _parser = new pb::MessageParser<NEW_USER_IN_ROOM_NTY>(() => new NEW_USER_IN_ROOM_NTY());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NEW_USER_IN_ROOM_NTY> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NEW_USER_IN_ROOM_NTY() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NEW_USER_IN_ROOM_NTY(NEW_USER_IN_ROOM_NTY other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varRoomUser_ = other.HasVarRoomUser ? other.varRoomUser_.Clone() : null;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NEW_USER_IN_ROOM_NTY Clone() {
    return new NEW_USER_IN_ROOM_NTY(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktNewUserInRoomNty;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_room_user" field.</summary>
  public const int VarRoomUserFieldNumber = 2;
  private global::RoomUserInfo varRoomUser_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomUserInfo VarRoomUser {
    get { return varRoomUser_; }
    set {
      varRoomUser_ = value;
    }
  }
  /// <summary>Gets whether the var_room_user field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomUser {
    get { return varRoomUser_ != null; }
  }
  /// <summary>Clears the value of the var_room_user field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomUser() {
    varRoomUser_ = null;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 3;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NEW_USER_IN_ROOM_NTY);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NEW_USER_IN_ROOM_NTY other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!object.Equals(VarRoomUser, other.VarRoomUser)) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarRoomUser) hash ^= VarRoomUser.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarRoomUser) {
      output.WriteRawTag(18);
      output.WriteMessage(VarRoomUser);
    }
    if (HasVarCode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarRoomUser) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(VarRoomUser);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NEW_USER_IN_ROOM_NTY other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarRoomUser) {
      if (!HasVarRoomUser) {
        VarRoomUser = new global::RoomUserInfo();
      }
      VarRoomUser.MergeFrom(other.VarRoomUser);
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          if (!HasVarRoomUser) {
            VarRoomUser = new global::RoomUserInfo();
          }
          input.ReadMessage(VarRoomUser);
          break;
        }
        case 24: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class LEAVE_ROOM_RES : pb::IMessage<LEAVE_ROOM_RES> {
  private static readonly pb::MessageParser<LEAVE_ROOM_RES> _parser = new pb::MessageParser<LEAVE_ROOM_RES>(() => new LEAVE_ROOM_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LEAVE_ROOM_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LEAVE_ROOM_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LEAVE_ROOM_RES(LEAVE_ROOM_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varName_ = other.varName_;
    varCode_ = other.varCode_;
    varIndex_ = other.varIndex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LEAVE_ROOM_RES Clone() {
    return new LEAVE_ROOM_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktLeaveRoomRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 2;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 3;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_index" field.</summary>
  public const int VarIndexFieldNumber = 4;
  private readonly static long VarIndexDefaultValue = 0L;

  private long varIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarIndex {
    get { if ((_hasBits0 & 4) != 0) { return varIndex_; } else { return VarIndexDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varIndex_ = value;
    }
  }
  /// <summary>Gets whether the "var_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarIndex {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarIndex() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LEAVE_ROOM_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LEAVE_ROOM_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarName != other.VarName) return false;
    if (VarCode != other.VarCode) return false;
    if (VarIndex != other.VarIndex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarIndex) hash ^= VarIndex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarName) {
      output.WriteRawTag(18);
      output.WriteBytes(VarName);
    }
    if (HasVarCode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarIndex) {
      output.WriteRawTag(32);
      output.WriteInt64(VarIndex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarIndex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LEAVE_ROOM_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarIndex) {
      VarIndex = other.VarIndex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarName = input.ReadBytes();
          break;
        }
        case 24: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 32: {
          VarIndex = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class ROOM_LIST_RES : pb::IMessage<ROOM_LIST_RES> {
  private static readonly pb::MessageParser<ROOM_LIST_RES> _parser = new pb::MessageParser<ROOM_LIST_RES>(() => new ROOM_LIST_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ROOM_LIST_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_LIST_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_LIST_RES(ROOM_LIST_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varRoomList_ = other.varRoomList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_LIST_RES Clone() {
    return new ROOM_LIST_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktRoomListRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_room_list" field.</summary>
  public const int VarRoomListFieldNumber = 3;
  private static readonly pb::FieldCodec<global::RoomInfo2> _repeated_varRoomList_codec
      = pb::FieldCodec.ForMessage(26, global::RoomInfo2.Parser);
  private readonly pbc::RepeatedField<global::RoomInfo2> varRoomList_ = new pbc::RepeatedField<global::RoomInfo2>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RoomInfo2> VarRoomList {
    get { return varRoomList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ROOM_LIST_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ROOM_LIST_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if(!varRoomList_.Equals(other.varRoomList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    hash ^= varRoomList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    varRoomList_.WriteTo(output, _repeated_varRoomList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    size += varRoomList_.CalculateSize(_repeated_varRoomList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ROOM_LIST_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    varRoomList_.Add(other.varRoomList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          varRoomList_.AddEntriesFrom(input, _repeated_varRoomList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ROOM_PASS_THROUGH_RES : pb::IMessage<ROOM_PASS_THROUGH_RES> {
  private static readonly pb::MessageParser<ROOM_PASS_THROUGH_RES> _parser = new pb::MessageParser<ROOM_PASS_THROUGH_RES>(() => new ROOM_PASS_THROUGH_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ROOM_PASS_THROUGH_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_PASS_THROUGH_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_PASS_THROUGH_RES(ROOM_PASS_THROUGH_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varName_ = other.varName_;
    varMessage_ = other.varMessage_;
    varMessageInt_ = other.varMessageInt_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_PASS_THROUGH_RES Clone() {
    return new ROOM_PASS_THROUGH_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktRoomPassThroughRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 3;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 4;
  private readonly static pb::ByteString VarMessageDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarMessage {
    get { return varMessage_ ?? VarMessageDefaultValue; }
    set {
      varMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessage {
    get { return varMessage_ != null; }
  }
  /// <summary>Clears the value of the "var_message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessage() {
    varMessage_ = null;
  }

  /// <summary>Field number for the "var_message_int" field.</summary>
  public const int VarMessageIntFieldNumber = 5;
  private readonly static int VarMessageIntDefaultValue = 0;

  private int varMessageInt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarMessageInt {
    get { if ((_hasBits0 & 4) != 0) { return varMessageInt_; } else { return VarMessageIntDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varMessageInt_ = value;
    }
  }
  /// <summary>Gets whether the "var_message_int" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessageInt {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_message_int" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessageInt() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ROOM_PASS_THROUGH_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ROOM_PASS_THROUGH_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if (VarName != other.VarName) return false;
    if (VarMessage != other.VarMessage) return false;
    if (VarMessageInt != other.VarMessageInt) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarMessage) hash ^= VarMessage.GetHashCode();
    if (HasVarMessageInt) hash ^= VarMessageInt.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarName) {
      output.WriteRawTag(26);
      output.WriteBytes(VarName);
    }
    if (HasVarMessage) {
      output.WriteRawTag(34);
      output.WriteBytes(VarMessage);
    }
    if (HasVarMessageInt) {
      output.WriteRawTag(40);
      output.WriteInt32(VarMessageInt);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (HasVarMessage) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarMessage);
    }
    if (HasVarMessageInt) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarMessageInt);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ROOM_PASS_THROUGH_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarMessage) {
      VarMessage = other.VarMessage;
    }
    if (other.HasVarMessageInt) {
      VarMessageInt = other.VarMessageInt;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          VarName = input.ReadBytes();
          break;
        }
        case 34: {
          VarMessage = input.ReadBytes();
          break;
        }
        case 40: {
          VarMessageInt = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class NOTICE_RES : pb::IMessage<NOTICE_RES> {
  private static readonly pb::MessageParser<NOTICE_RES> _parser = new pb::MessageParser<NOTICE_RES>(() => new NOTICE_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NOTICE_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NOTICE_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NOTICE_RES(NOTICE_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varMessage_ = other.varMessage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NOTICE_RES Clone() {
    return new NOTICE_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktNoticeRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 2;
  private readonly static pb::ByteString VarMessageDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarMessage {
    get { return varMessage_ ?? VarMessageDefaultValue; }
    set {
      varMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessage {
    get { return varMessage_ != null; }
  }
  /// <summary>Clears the value of the "var_message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessage() {
    varMessage_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NOTICE_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NOTICE_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarMessage != other.VarMessage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarMessage) hash ^= VarMessage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarMessage) {
      output.WriteRawTag(18);
      output.WriteBytes(VarMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarMessage) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarMessage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NOTICE_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarMessage) {
      VarMessage = other.VarMessage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarMessage = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class BITMAP_MESSAGE_RES : pb::IMessage<BITMAP_MESSAGE_RES> {
  private static readonly pb::MessageParser<BITMAP_MESSAGE_RES> _parser = new pb::MessageParser<BITMAP_MESSAGE_RES>(() => new BITMAP_MESSAGE_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BITMAP_MESSAGE_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BITMAP_MESSAGE_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BITMAP_MESSAGE_RES(BITMAP_MESSAGE_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varMessage_ = other.varMessage_.Clone();
    varName_ = other.varName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BITMAP_MESSAGE_RES Clone() {
    return new BITMAP_MESSAGE_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktBitmapMessageRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 3;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_varMessage_codec
      = pb::FieldCodec.ForBytes(26);
  private readonly pbc::RepeatedField<pb::ByteString> varMessage_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> VarMessage {
    get { return varMessage_; }
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 4;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BITMAP_MESSAGE_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BITMAP_MESSAGE_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if(!varMessage_.Equals(other.varMessage_)) return false;
    if (VarName != other.VarName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    hash ^= varMessage_.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    varMessage_.WriteTo(output, _repeated_varMessage_codec);
    if (HasVarName) {
      output.WriteRawTag(34);
      output.WriteBytes(VarName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    size += varMessage_.CalculateSize(_repeated_varMessage_codec);
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BITMAP_MESSAGE_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    varMessage_.Add(other.varMessage_);
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          varMessage_.AddEntriesFrom(input, _repeated_varMessage_codec);
          break;
        }
        case 34: {
          VarName = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class AUDIO_MESSAGE_RES : pb::IMessage<AUDIO_MESSAGE_RES> {
  private static readonly pb::MessageParser<AUDIO_MESSAGE_RES> _parser = new pb::MessageParser<AUDIO_MESSAGE_RES>(() => new AUDIO_MESSAGE_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AUDIO_MESSAGE_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AUDIO_MESSAGE_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AUDIO_MESSAGE_RES(AUDIO_MESSAGE_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varMessage_ = other.varMessage_.Clone();
    varName_ = other.varName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AUDIO_MESSAGE_RES Clone() {
    return new AUDIO_MESSAGE_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktAudioMessageRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 3;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_varMessage_codec
      = pb::FieldCodec.ForBytes(26);
  private readonly pbc::RepeatedField<pb::ByteString> varMessage_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> VarMessage {
    get { return varMessage_; }
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 4;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AUDIO_MESSAGE_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AUDIO_MESSAGE_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if(!varMessage_.Equals(other.varMessage_)) return false;
    if (VarName != other.VarName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    hash ^= varMessage_.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    varMessage_.WriteTo(output, _repeated_varMessage_codec);
    if (HasVarName) {
      output.WriteRawTag(34);
      output.WriteBytes(VarName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    size += varMessage_.CalculateSize(_repeated_varMessage_codec);
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AUDIO_MESSAGE_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    varMessage_.Add(other.varMessage_);
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          varMessage_.AddEntriesFrom(input, _repeated_varMessage_codec);
          break;
        }
        case 34: {
          VarName = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class PRAY_MESSAGE_RES : pb::IMessage<PRAY_MESSAGE_RES> {
  private static readonly pb::MessageParser<PRAY_MESSAGE_RES> _parser = new pb::MessageParser<PRAY_MESSAGE_RES>(() => new PRAY_MESSAGE_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PRAY_MESSAGE_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_RES(PRAY_MESSAGE_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varMessage_ = other.varMessage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_RES Clone() {
    return new PRAY_MESSAGE_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktPrayMessageRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 3;
  private readonly static pb::ByteString VarMessageDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarMessage {
    get { return varMessage_ ?? VarMessageDefaultValue; }
    set {
      varMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessage {
    get { return varMessage_ != null; }
  }
  /// <summary>Clears the value of the "var_message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessage() {
    varMessage_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PRAY_MESSAGE_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PRAY_MESSAGE_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if (VarMessage != other.VarMessage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarMessage) hash ^= VarMessage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarMessage) {
      output.WriteRawTag(26);
      output.WriteBytes(VarMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarMessage) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarMessage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PRAY_MESSAGE_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarMessage) {
      VarMessage = other.VarMessage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          VarMessage = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class PRAY_MESSAGE_REG_RES : pb::IMessage<PRAY_MESSAGE_REG_RES> {
  private static readonly pb::MessageParser<PRAY_MESSAGE_REG_RES> _parser = new pb::MessageParser<PRAY_MESSAGE_REG_RES>(() => new PRAY_MESSAGE_REG_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PRAY_MESSAGE_REG_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REG_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REG_RES(PRAY_MESSAGE_REG_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varList_ = other.varList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PRAY_MESSAGE_REG_RES Clone() {
    return new PRAY_MESSAGE_REG_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktPrayMessageRegRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_list" field.</summary>
  public const int VarListFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PrayInfo> _repeated_varList_codec
      = pb::FieldCodec.ForMessage(18, global::PrayInfo.Parser);
  private readonly pbc::RepeatedField<global::PrayInfo> varList_ = new pbc::RepeatedField<global::PrayInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PrayInfo> VarList {
    get { return varList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PRAY_MESSAGE_REG_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PRAY_MESSAGE_REG_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!varList_.Equals(other.varList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    hash ^= varList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    varList_.WriteTo(output, _repeated_varList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    size += varList_.CalculateSize(_repeated_varList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PRAY_MESSAGE_REG_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    varList_.Add(other.varList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          varList_.AddEntriesFrom(input, _repeated_varList_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
