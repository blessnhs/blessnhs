// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: GS.CLI.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from GS.CLI.proto</summary>
public static partial class GSCLIReflection {

  #region Descriptor
  /// <summary>File descriptor for GS.CLI.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GSCLIReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgxHUy5DTEkucHJvdG8aCkVudW0ucHJvdG8aD1N0cnVjdHVyZS5wcm90byJr",
          "CgtWRVJTSU9OX1JFUxIpCgJpZBgBIAEoDjIJLlBST1RPQ09MOhJJRF9QS1Rf",
          "VkVSU0lPTl9SRVMSEwoLdmFyX3ZlcnNpb24YAiABKAISHAoIdmFyX2NvZGUY",
          "AyABKA4yCi5FcnJvckNvZGUi+AEKCUxPR0lOX1JFUxInCgJpZBgBIAEoDjIJ",
          "LlBST1RPQ09MOhBJRF9QS1RfTE9HSU5fUkVTEhwKCHZhcl9jb2RlGAIgASgO",
          "MgouRXJyb3JDb2RlEhEKCXZhcl9pbmRleBgDIAEoAxIPCgd2YXJfd2luGAQg",
          "ASgFEhAKCHZhcl9sb3NlGAUgASgFEhAKCHZhcl9kcmF3GAYgASgFEhEKCXZh",
          "cl9zY29yZRgHIAEoBRIQCgh2YXJfcmFuaxgIIAEoBRIRCgl2YXJfbGV2ZWwY",
          "CSABKAUSEgoKdmFyX2xvY2FsZRgKIAEoDBIQCgh2YXJfbmFtZRgLIAEoDCKF",
          "AQoPQ1JFQVRFX1JPT01fUkVTEi0KAmlkGAEgASgOMgkuUFJPVE9DT0w6FklE",
          "X1BLVF9DUkVBVEVfUk9PTV9SRVMSEAoIdmFyX25hbWUYAiABKAwSEwoLdmFy",
          "X3Jvb21faWQYAyABKAUSHAoIdmFyX2NvZGUYBCABKA4yCi5FcnJvckNvZGUi",
          "gwEKDkVOVEVSX1JPT01fUkVTEiwKAmlkGAEgASgOMgkuUFJPVE9DT0w6FUlE",
          "X1BLVF9FTlRFUl9ST09NX1JFUxIQCgh2YXJfbmFtZRgCIAEoDBITCgt2YXJf",
          "cm9vbV9pZBgDIAEoBRIcCgh2YXJfY29kZRgEIAEoDjIKLkVycm9yQ29kZSKO",
          "AQoUTkVXX1VTRVJfSU5fUk9PTV9OVFkSMgoCaWQYASABKA4yCS5QUk9UT0NP",
          "TDobSURfUEtUX05FV19VU0VSX0lOX1JPT01fTlRZEiQKDXZhcl9yb29tX3Vz",
          "ZXIYAiABKAsyDS5Sb29tVXNlckluZm8SHAoIdmFyX2NvZGUYAyABKA4yCi5F",
          "cnJvckNvZGUigQEKDkxFQVZFX1JPT01fUkVTEiwKAmlkGAEgASgOMgkuUFJP",
          "VE9DT0w6FUlEX1BLVF9MRUFWRV9ST09NX1JFUxIQCgh2YXJfbmFtZRgCIAEo",
          "DBIcCgh2YXJfY29kZRgDIAEoDjIKLkVycm9yQ29kZRIRCgl2YXJfaW5kZXgY",
          "BCABKAMifQoNUk9PTV9MSVNUX1JFUxIrCgJpZBgBIAEoDjIJLlBST1RPQ09M",
          "OhRJRF9QS1RfUk9PTV9MSVNUX1JFUxIcCgh2YXJfY29kZRgCIAEoDjIKLkVy",
          "cm9yQ29kZRIhCg12YXJfcm9vbV9saXN0GAMgAygLMgouUm9vbUluZm8yIlIK",
          "CU1BVENIX1JFUxInCgJpZBgBIAEoDjIJLlBST1RPQ09MOhBJRF9QS1RfTUFU",
          "Q0hfUkVTEhwKCHZhcl9jb2RlGAIgASgOMgouRXJyb3JDb2RlIqgCCg9HQU1F",
          "X1JFU1VMVF9OVFkSLQoCaWQYASABKA4yCS5QUk9UT0NPTDoWSURfUEtUX0dB",
          "TUVfUkVTVUxUX05UWRIRCgl2YXJfaW5kZXgYAiABKAMSEAoIdmFyX25hbWUY",
          "AyABKAwSHAoIdmFyX2NvZGUYBCABKA4yCi5FcnJvckNvZGUSGQoJdmFyX2Nv",
          "bG9yGAUgASgOMgYuZVRlYW0SEwoLdmFyX2luZGV4XzEYBiABKAMSEwoLdmFy",
          "X2xldmVsXzEYByABKAUSGQoRdmFyX2xldmVsX3BvaW50XzEYCCABKAUSEwoL",
          "dmFyX2luZGV4XzIYCSABKAMSEwoLdmFyX2xldmVsXzIYCiABKAUSGQoRdmFy",
          "X2xldmVsX3BvaW50XzIYCyABKAUibgoIUkFOS19SRVMSJgoCaWQYASABKA4y",
          "CS5QUk9UT0NPTDoPSURfUEtUX1JBTktfUkVTEhwKDXZhcl9yYW5rX2xpc3QY",
          "AiADKAsyBS5SYW5rEhwKCHZhcl9jb2RlGAMgASgOMgouRXJyb3JDb2RlIk4K",
          "B1FOU19SRVMSJQoCaWQYASABKA4yCS5QUk9UT0NPTDoOSURfUEtUX1FOU19S",
          "RVMSHAoIdmFyX2NvZGUYAyABKA4yCi5FcnJvckNvZGUimAEKFVJPT01fUEFT",
          "U19USFJPVUdIX1JFUxIzCgJpZBgBIAEoDjIJLlBST1RPQ09MOhxJRF9QS1Rf",
          "Uk9PTV9QQVNTX1RIUk9VR0hfUkVTEhwKCHZhcl9jb2RlGAIgASgOMgouRXJy",
          "b3JDb2RlEhMKC3Zhcl9tZXNzYWdlGAMgAigMEhcKD3Zhcl9tZXNzYWdlX2lu",
          "dBgEIAIoBSJCChBDQU5DRUxfTUFUQ0hfUkVTEi4KAmlkGAEgASgOMgkuUFJP",
          "VE9DT0w6F0lEX1BLVF9DQU5DRUxfTUFUQ0hfUkVTIksKCk5PVElDRV9SRVMS",
          "KAoCaWQYASABKA4yCS5QUk9UT0NPTDoRSURfUEtUX05PVElDRV9SRVMSEwoL",
          "dmFyX21lc3NhZ2UYAiACKAwidgoSQ0hFQ0tfTklDS05BTUVfUkVTEjAKAmlk",
          "GAEgASgOMgkuUFJPVE9DT0w6GUlEX1BLVF9DSEVDS19OSUNLTkFNRV9SRVMS",
          "HAoIdmFyX2NvZGUYAiABKA4yCi5FcnJvckNvZGUSEAoIdmFyX25hbWUYAyAC",
          "KAwiiwEKEkJJVE1BUF9NRVNTQUdFX1JFUxIwCgJpZBgBIAEoDjIJLlBST1RP",
          "Q09MOhlJRF9QS1RfQklUTUFQX01FU1NBR0VfUkVTEhwKCHZhcl9jb2RlGAIg",
          "ASgOMgouRXJyb3JDb2RlEhMKC3Zhcl9tZXNzYWdlGAMgAygMEhAKCHZhcl9u",
          "YW1lGAQgASgMIokBChFBVURJT19NRVNTQUdFX1JFUxIvCgJpZBgBIAEoDjIJ",
          "LlBST1RPQ09MOhhJRF9QS1RfQVVESU9fTUVTU0FHRV9SRVMSHAoIdmFyX2Nv",
          "ZGUYAiABKA4yCi5FcnJvckNvZGUSEwoLdmFyX21lc3NhZ2UYAyADKAwSEAoI",
          "dmFyX25hbWUYBCABKAxCAkgB"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::EnumReflection.Descriptor, global::StructureReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::VERSION_RES), global::VERSION_RES.Parser, new[]{ "Id", "VarVersion", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LOGIN_RES), global::LOGIN_RES.Parser, new[]{ "Id", "VarCode", "VarIndex", "VarWin", "VarLose", "VarDraw", "VarScore", "VarRank", "VarLevel", "VarLocale", "VarName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CREATE_ROOM_RES), global::CREATE_ROOM_RES.Parser, new[]{ "Id", "VarName", "VarRoomId", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ENTER_ROOM_RES), global::ENTER_ROOM_RES.Parser, new[]{ "Id", "VarName", "VarRoomId", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NEW_USER_IN_ROOM_NTY), global::NEW_USER_IN_ROOM_NTY.Parser, new[]{ "Id", "VarRoomUser", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LEAVE_ROOM_RES), global::LEAVE_ROOM_RES.Parser, new[]{ "Id", "VarName", "VarCode", "VarIndex" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ROOM_LIST_RES), global::ROOM_LIST_RES.Parser, new[]{ "Id", "VarCode", "VarRoomList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MATCH_RES), global::MATCH_RES.Parser, new[]{ "Id", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GAME_RESULT_NTY), global::GAME_RESULT_NTY.Parser, new[]{ "Id", "VarIndex", "VarName", "VarCode", "VarColor", "VarIndex1", "VarLevel1", "VarLevelPoint1", "VarIndex2", "VarLevel2", "VarLevelPoint2" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RANK_RES), global::RANK_RES.Parser, new[]{ "Id", "VarRankList", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::QNS_RES), global::QNS_RES.Parser, new[]{ "Id", "VarCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ROOM_PASS_THROUGH_RES), global::ROOM_PASS_THROUGH_RES.Parser, new[]{ "Id", "VarCode", "VarMessage", "VarMessageInt" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CANCEL_MATCH_RES), global::CANCEL_MATCH_RES.Parser, new[]{ "Id" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NOTICE_RES), global::NOTICE_RES.Parser, new[]{ "Id", "VarMessage" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CHECK_NICKNAME_RES), global::CHECK_NICKNAME_RES.Parser, new[]{ "Id", "VarCode", "VarName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BITMAP_MESSAGE_RES), global::BITMAP_MESSAGE_RES.Parser, new[]{ "Id", "VarCode", "VarMessage", "VarName" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AUDIO_MESSAGE_RES), global::AUDIO_MESSAGE_RES.Parser, new[]{ "Id", "VarCode", "VarMessage", "VarName" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class VERSION_RES : pb::IMessage<VERSION_RES> {
  private static readonly pb::MessageParser<VERSION_RES> _parser = new pb::MessageParser<VERSION_RES>(() => new VERSION_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<VERSION_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERSION_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERSION_RES(VERSION_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varVersion_ = other.varVersion_;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public VERSION_RES Clone() {
    return new VERSION_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktVersionRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_version" field.</summary>
  public const int VarVersionFieldNumber = 2;
  private readonly static float VarVersionDefaultValue = 0F;

  private float varVersion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float VarVersion {
    get { if ((_hasBits0 & 2) != 0) { return varVersion_; } else { return VarVersionDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varVersion_ = value;
    }
  }
  /// <summary>Gets whether the "var_version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarVersion {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarVersion() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 3;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 4) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as VERSION_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(VERSION_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VarVersion, other.VarVersion)) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarVersion) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VarVersion);
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarVersion) {
      output.WriteRawTag(21);
      output.WriteFloat(VarVersion);
    }
    if (HasVarCode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarVersion) {
      size += 1 + 4;
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(VERSION_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarVersion) {
      VarVersion = other.VarVersion;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 21: {
          VarVersion = input.ReadFloat();
          break;
        }
        case 24: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class LOGIN_RES : pb::IMessage<LOGIN_RES> {
  private static readonly pb::MessageParser<LOGIN_RES> _parser = new pb::MessageParser<LOGIN_RES>(() => new LOGIN_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LOGIN_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LOGIN_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LOGIN_RES(LOGIN_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varIndex_ = other.varIndex_;
    varWin_ = other.varWin_;
    varLose_ = other.varLose_;
    varDraw_ = other.varDraw_;
    varScore_ = other.varScore_;
    varRank_ = other.varRank_;
    varLevel_ = other.varLevel_;
    varLocale_ = other.varLocale_;
    varName_ = other.varName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LOGIN_RES Clone() {
    return new LOGIN_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktLoginRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_index" field.</summary>
  public const int VarIndexFieldNumber = 3;
  private readonly static long VarIndexDefaultValue = 0L;

  private long varIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarIndex {
    get { if ((_hasBits0 & 4) != 0) { return varIndex_; } else { return VarIndexDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varIndex_ = value;
    }
  }
  /// <summary>Gets whether the "var_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarIndex {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarIndex() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "var_win" field.</summary>
  public const int VarWinFieldNumber = 4;
  private readonly static int VarWinDefaultValue = 0;

  private int varWin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarWin {
    get { if ((_hasBits0 & 8) != 0) { return varWin_; } else { return VarWinDefaultValue; } }
    set {
      _hasBits0 |= 8;
      varWin_ = value;
    }
  }
  /// <summary>Gets whether the "var_win" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarWin {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "var_win" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarWin() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "var_lose" field.</summary>
  public const int VarLoseFieldNumber = 5;
  private readonly static int VarLoseDefaultValue = 0;

  private int varLose_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarLose {
    get { if ((_hasBits0 & 16) != 0) { return varLose_; } else { return VarLoseDefaultValue; } }
    set {
      _hasBits0 |= 16;
      varLose_ = value;
    }
  }
  /// <summary>Gets whether the "var_lose" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarLose {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "var_lose" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarLose() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "var_draw" field.</summary>
  public const int VarDrawFieldNumber = 6;
  private readonly static int VarDrawDefaultValue = 0;

  private int varDraw_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarDraw {
    get { if ((_hasBits0 & 32) != 0) { return varDraw_; } else { return VarDrawDefaultValue; } }
    set {
      _hasBits0 |= 32;
      varDraw_ = value;
    }
  }
  /// <summary>Gets whether the "var_draw" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarDraw {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "var_draw" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarDraw() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "var_score" field.</summary>
  public const int VarScoreFieldNumber = 7;
  private readonly static int VarScoreDefaultValue = 0;

  private int varScore_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarScore {
    get { if ((_hasBits0 & 64) != 0) { return varScore_; } else { return VarScoreDefaultValue; } }
    set {
      _hasBits0 |= 64;
      varScore_ = value;
    }
  }
  /// <summary>Gets whether the "var_score" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarScore {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "var_score" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarScore() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "var_rank" field.</summary>
  public const int VarRankFieldNumber = 8;
  private readonly static int VarRankDefaultValue = 0;

  private int varRank_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRank {
    get { if ((_hasBits0 & 128) != 0) { return varRank_; } else { return VarRankDefaultValue; } }
    set {
      _hasBits0 |= 128;
      varRank_ = value;
    }
  }
  /// <summary>Gets whether the "var_rank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRank {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "var_rank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRank() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "var_level" field.</summary>
  public const int VarLevelFieldNumber = 9;
  private readonly static int VarLevelDefaultValue = 0;

  private int varLevel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarLevel {
    get { if ((_hasBits0 & 256) != 0) { return varLevel_; } else { return VarLevelDefaultValue; } }
    set {
      _hasBits0 |= 256;
      varLevel_ = value;
    }
  }
  /// <summary>Gets whether the "var_level" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarLevel {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "var_level" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarLevel() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "var_locale" field.</summary>
  public const int VarLocaleFieldNumber = 10;
  private readonly static pb::ByteString VarLocaleDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varLocale_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarLocale {
    get { return varLocale_ ?? VarLocaleDefaultValue; }
    set {
      varLocale_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_locale" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarLocale {
    get { return varLocale_ != null; }
  }
  /// <summary>Clears the value of the "var_locale" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarLocale() {
    varLocale_ = null;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 11;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LOGIN_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LOGIN_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if (VarIndex != other.VarIndex) return false;
    if (VarWin != other.VarWin) return false;
    if (VarLose != other.VarLose) return false;
    if (VarDraw != other.VarDraw) return false;
    if (VarScore != other.VarScore) return false;
    if (VarRank != other.VarRank) return false;
    if (VarLevel != other.VarLevel) return false;
    if (VarLocale != other.VarLocale) return false;
    if (VarName != other.VarName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarIndex) hash ^= VarIndex.GetHashCode();
    if (HasVarWin) hash ^= VarWin.GetHashCode();
    if (HasVarLose) hash ^= VarLose.GetHashCode();
    if (HasVarDraw) hash ^= VarDraw.GetHashCode();
    if (HasVarScore) hash ^= VarScore.GetHashCode();
    if (HasVarRank) hash ^= VarRank.GetHashCode();
    if (HasVarLevel) hash ^= VarLevel.GetHashCode();
    if (HasVarLocale) hash ^= VarLocale.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarIndex) {
      output.WriteRawTag(24);
      output.WriteInt64(VarIndex);
    }
    if (HasVarWin) {
      output.WriteRawTag(32);
      output.WriteInt32(VarWin);
    }
    if (HasVarLose) {
      output.WriteRawTag(40);
      output.WriteInt32(VarLose);
    }
    if (HasVarDraw) {
      output.WriteRawTag(48);
      output.WriteInt32(VarDraw);
    }
    if (HasVarScore) {
      output.WriteRawTag(56);
      output.WriteInt32(VarScore);
    }
    if (HasVarRank) {
      output.WriteRawTag(64);
      output.WriteInt32(VarRank);
    }
    if (HasVarLevel) {
      output.WriteRawTag(72);
      output.WriteInt32(VarLevel);
    }
    if (HasVarLocale) {
      output.WriteRawTag(82);
      output.WriteBytes(VarLocale);
    }
    if (HasVarName) {
      output.WriteRawTag(90);
      output.WriteBytes(VarName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarIndex);
    }
    if (HasVarWin) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarWin);
    }
    if (HasVarLose) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarLose);
    }
    if (HasVarDraw) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarDraw);
    }
    if (HasVarScore) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarScore);
    }
    if (HasVarRank) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRank);
    }
    if (HasVarLevel) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarLevel);
    }
    if (HasVarLocale) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarLocale);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LOGIN_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarIndex) {
      VarIndex = other.VarIndex;
    }
    if (other.HasVarWin) {
      VarWin = other.VarWin;
    }
    if (other.HasVarLose) {
      VarLose = other.VarLose;
    }
    if (other.HasVarDraw) {
      VarDraw = other.VarDraw;
    }
    if (other.HasVarScore) {
      VarScore = other.VarScore;
    }
    if (other.HasVarRank) {
      VarRank = other.VarRank;
    }
    if (other.HasVarLevel) {
      VarLevel = other.VarLevel;
    }
    if (other.HasVarLocale) {
      VarLocale = other.VarLocale;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 24: {
          VarIndex = input.ReadInt64();
          break;
        }
        case 32: {
          VarWin = input.ReadInt32();
          break;
        }
        case 40: {
          VarLose = input.ReadInt32();
          break;
        }
        case 48: {
          VarDraw = input.ReadInt32();
          break;
        }
        case 56: {
          VarScore = input.ReadInt32();
          break;
        }
        case 64: {
          VarRank = input.ReadInt32();
          break;
        }
        case 72: {
          VarLevel = input.ReadInt32();
          break;
        }
        case 82: {
          VarLocale = input.ReadBytes();
          break;
        }
        case 90: {
          VarName = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class CREATE_ROOM_RES : pb::IMessage<CREATE_ROOM_RES> {
  private static readonly pb::MessageParser<CREATE_ROOM_RES> _parser = new pb::MessageParser<CREATE_ROOM_RES>(() => new CREATE_ROOM_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CREATE_ROOM_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CREATE_ROOM_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CREATE_ROOM_RES(CREATE_ROOM_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varName_ = other.varName_;
    varRoomId_ = other.varRoomId_;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CREATE_ROOM_RES Clone() {
    return new CREATE_ROOM_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktCreateRoomRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 2;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_room_id" field.</summary>
  public const int VarRoomIdFieldNumber = 3;
  private readonly static int VarRoomIdDefaultValue = 0;

  private int varRoomId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomId {
    get { if ((_hasBits0 & 2) != 0) { return varRoomId_; } else { return VarRoomIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varRoomId_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_room_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 4;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 4) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CREATE_ROOM_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CREATE_ROOM_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarName != other.VarName) return false;
    if (VarRoomId != other.VarRoomId) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarRoomId) hash ^= VarRoomId.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarName) {
      output.WriteRawTag(18);
      output.WriteBytes(VarName);
    }
    if (HasVarRoomId) {
      output.WriteRawTag(24);
      output.WriteInt32(VarRoomId);
    }
    if (HasVarCode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (HasVarRoomId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomId);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CREATE_ROOM_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarRoomId) {
      VarRoomId = other.VarRoomId;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarName = input.ReadBytes();
          break;
        }
        case 24: {
          VarRoomId = input.ReadInt32();
          break;
        }
        case 32: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class ENTER_ROOM_RES : pb::IMessage<ENTER_ROOM_RES> {
  private static readonly pb::MessageParser<ENTER_ROOM_RES> _parser = new pb::MessageParser<ENTER_ROOM_RES>(() => new ENTER_ROOM_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ENTER_ROOM_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENTER_ROOM_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENTER_ROOM_RES(ENTER_ROOM_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varName_ = other.varName_;
    varRoomId_ = other.varRoomId_;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ENTER_ROOM_RES Clone() {
    return new ENTER_ROOM_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktEnterRoomRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 2;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_room_id" field.</summary>
  public const int VarRoomIdFieldNumber = 3;
  private readonly static int VarRoomIdDefaultValue = 0;

  private int varRoomId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarRoomId {
    get { if ((_hasBits0 & 2) != 0) { return varRoomId_; } else { return VarRoomIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varRoomId_ = value;
    }
  }
  /// <summary>Gets whether the "var_room_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_room_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 4;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 4) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ENTER_ROOM_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ENTER_ROOM_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarName != other.VarName) return false;
    if (VarRoomId != other.VarRoomId) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarRoomId) hash ^= VarRoomId.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarName) {
      output.WriteRawTag(18);
      output.WriteBytes(VarName);
    }
    if (HasVarRoomId) {
      output.WriteRawTag(24);
      output.WriteInt32(VarRoomId);
    }
    if (HasVarCode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (HasVarRoomId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarRoomId);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ENTER_ROOM_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarRoomId) {
      VarRoomId = other.VarRoomId;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarName = input.ReadBytes();
          break;
        }
        case 24: {
          VarRoomId = input.ReadInt32();
          break;
        }
        case 32: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class NEW_USER_IN_ROOM_NTY : pb::IMessage<NEW_USER_IN_ROOM_NTY> {
  private static readonly pb::MessageParser<NEW_USER_IN_ROOM_NTY> _parser = new pb::MessageParser<NEW_USER_IN_ROOM_NTY>(() => new NEW_USER_IN_ROOM_NTY());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NEW_USER_IN_ROOM_NTY> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NEW_USER_IN_ROOM_NTY() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NEW_USER_IN_ROOM_NTY(NEW_USER_IN_ROOM_NTY other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varRoomUser_ = other.HasVarRoomUser ? other.varRoomUser_.Clone() : null;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NEW_USER_IN_ROOM_NTY Clone() {
    return new NEW_USER_IN_ROOM_NTY(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktNewUserInRoomNty;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_room_user" field.</summary>
  public const int VarRoomUserFieldNumber = 2;
  private global::RoomUserInfo varRoomUser_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomUserInfo VarRoomUser {
    get { return varRoomUser_; }
    set {
      varRoomUser_ = value;
    }
  }
  /// <summary>Gets whether the var_room_user field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarRoomUser {
    get { return varRoomUser_ != null; }
  }
  /// <summary>Clears the value of the var_room_user field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarRoomUser() {
    varRoomUser_ = null;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 3;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NEW_USER_IN_ROOM_NTY);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NEW_USER_IN_ROOM_NTY other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!object.Equals(VarRoomUser, other.VarRoomUser)) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarRoomUser) hash ^= VarRoomUser.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarRoomUser) {
      output.WriteRawTag(18);
      output.WriteMessage(VarRoomUser);
    }
    if (HasVarCode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarRoomUser) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(VarRoomUser);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NEW_USER_IN_ROOM_NTY other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarRoomUser) {
      if (!HasVarRoomUser) {
        VarRoomUser = new global::RoomUserInfo();
      }
      VarRoomUser.MergeFrom(other.VarRoomUser);
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          if (!HasVarRoomUser) {
            VarRoomUser = new global::RoomUserInfo();
          }
          input.ReadMessage(VarRoomUser);
          break;
        }
        case 24: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class LEAVE_ROOM_RES : pb::IMessage<LEAVE_ROOM_RES> {
  private static readonly pb::MessageParser<LEAVE_ROOM_RES> _parser = new pb::MessageParser<LEAVE_ROOM_RES>(() => new LEAVE_ROOM_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LEAVE_ROOM_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LEAVE_ROOM_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LEAVE_ROOM_RES(LEAVE_ROOM_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varName_ = other.varName_;
    varCode_ = other.varCode_;
    varIndex_ = other.varIndex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LEAVE_ROOM_RES Clone() {
    return new LEAVE_ROOM_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktLeaveRoomRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 2;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 3;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_index" field.</summary>
  public const int VarIndexFieldNumber = 4;
  private readonly static long VarIndexDefaultValue = 0L;

  private long varIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarIndex {
    get { if ((_hasBits0 & 4) != 0) { return varIndex_; } else { return VarIndexDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varIndex_ = value;
    }
  }
  /// <summary>Gets whether the "var_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarIndex {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarIndex() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LEAVE_ROOM_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LEAVE_ROOM_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarName != other.VarName) return false;
    if (VarCode != other.VarCode) return false;
    if (VarIndex != other.VarIndex) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarIndex) hash ^= VarIndex.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarName) {
      output.WriteRawTag(18);
      output.WriteBytes(VarName);
    }
    if (HasVarCode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarIndex) {
      output.WriteRawTag(32);
      output.WriteInt64(VarIndex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarIndex);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LEAVE_ROOM_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarIndex) {
      VarIndex = other.VarIndex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarName = input.ReadBytes();
          break;
        }
        case 24: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 32: {
          VarIndex = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class ROOM_LIST_RES : pb::IMessage<ROOM_LIST_RES> {
  private static readonly pb::MessageParser<ROOM_LIST_RES> _parser = new pb::MessageParser<ROOM_LIST_RES>(() => new ROOM_LIST_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ROOM_LIST_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_LIST_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_LIST_RES(ROOM_LIST_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varRoomList_ = other.varRoomList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_LIST_RES Clone() {
    return new ROOM_LIST_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktRoomListRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_room_list" field.</summary>
  public const int VarRoomListFieldNumber = 3;
  private static readonly pb::FieldCodec<global::RoomInfo2> _repeated_varRoomList_codec
      = pb::FieldCodec.ForMessage(26, global::RoomInfo2.Parser);
  private readonly pbc::RepeatedField<global::RoomInfo2> varRoomList_ = new pbc::RepeatedField<global::RoomInfo2>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RoomInfo2> VarRoomList {
    get { return varRoomList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ROOM_LIST_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ROOM_LIST_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if(!varRoomList_.Equals(other.varRoomList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    hash ^= varRoomList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    varRoomList_.WriteTo(output, _repeated_varRoomList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    size += varRoomList_.CalculateSize(_repeated_varRoomList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ROOM_LIST_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    varRoomList_.Add(other.varRoomList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          varRoomList_.AddEntriesFrom(input, _repeated_varRoomList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class MATCH_RES : pb::IMessage<MATCH_RES> {
  private static readonly pb::MessageParser<MATCH_RES> _parser = new pb::MessageParser<MATCH_RES>(() => new MATCH_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MATCH_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MATCH_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MATCH_RES(MATCH_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MATCH_RES Clone() {
    return new MATCH_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktMatchRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MATCH_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MATCH_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MATCH_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class GAME_RESULT_NTY : pb::IMessage<GAME_RESULT_NTY> {
  private static readonly pb::MessageParser<GAME_RESULT_NTY> _parser = new pb::MessageParser<GAME_RESULT_NTY>(() => new GAME_RESULT_NTY());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GAME_RESULT_NTY> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GAME_RESULT_NTY() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GAME_RESULT_NTY(GAME_RESULT_NTY other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varIndex_ = other.varIndex_;
    varName_ = other.varName_;
    varCode_ = other.varCode_;
    varColor_ = other.varColor_;
    varIndex1_ = other.varIndex1_;
    varLevel1_ = other.varLevel1_;
    varLevelPoint1_ = other.varLevelPoint1_;
    varIndex2_ = other.varIndex2_;
    varLevel2_ = other.varLevel2_;
    varLevelPoint2_ = other.varLevelPoint2_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GAME_RESULT_NTY Clone() {
    return new GAME_RESULT_NTY(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktGameResultNty;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_index" field.</summary>
  public const int VarIndexFieldNumber = 2;
  private readonly static long VarIndexDefaultValue = 0L;

  private long varIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarIndex {
    get { if ((_hasBits0 & 2) != 0) { return varIndex_; } else { return VarIndexDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varIndex_ = value;
    }
  }
  /// <summary>Gets whether the "var_index" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarIndex {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_index" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarIndex() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 3;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 4;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 4) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "var_color" field.</summary>
  public const int VarColorFieldNumber = 5;
  private readonly static global::eTeam VarColorDefaultValue = global::eTeam.None;

  private global::eTeam varColor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::eTeam VarColor {
    get { if ((_hasBits0 & 8) != 0) { return varColor_; } else { return VarColorDefaultValue; } }
    set {
      _hasBits0 |= 8;
      varColor_ = value;
    }
  }
  /// <summary>Gets whether the "var_color" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarColor {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "var_color" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarColor() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "var_index_1" field.</summary>
  public const int VarIndex1FieldNumber = 6;
  private readonly static long VarIndex1DefaultValue = 0L;

  private long varIndex1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarIndex1 {
    get { if ((_hasBits0 & 16) != 0) { return varIndex1_; } else { return VarIndex1DefaultValue; } }
    set {
      _hasBits0 |= 16;
      varIndex1_ = value;
    }
  }
  /// <summary>Gets whether the "var_index_1" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarIndex1 {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "var_index_1" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarIndex1() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "var_level_1" field.</summary>
  public const int VarLevel1FieldNumber = 7;
  private readonly static int VarLevel1DefaultValue = 0;

  private int varLevel1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarLevel1 {
    get { if ((_hasBits0 & 32) != 0) { return varLevel1_; } else { return VarLevel1DefaultValue; } }
    set {
      _hasBits0 |= 32;
      varLevel1_ = value;
    }
  }
  /// <summary>Gets whether the "var_level_1" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarLevel1 {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "var_level_1" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarLevel1() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "var_level_point_1" field.</summary>
  public const int VarLevelPoint1FieldNumber = 8;
  private readonly static int VarLevelPoint1DefaultValue = 0;

  private int varLevelPoint1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarLevelPoint1 {
    get { if ((_hasBits0 & 64) != 0) { return varLevelPoint1_; } else { return VarLevelPoint1DefaultValue; } }
    set {
      _hasBits0 |= 64;
      varLevelPoint1_ = value;
    }
  }
  /// <summary>Gets whether the "var_level_point_1" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarLevelPoint1 {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "var_level_point_1" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarLevelPoint1() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "var_index_2" field.</summary>
  public const int VarIndex2FieldNumber = 9;
  private readonly static long VarIndex2DefaultValue = 0L;

  private long varIndex2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long VarIndex2 {
    get { if ((_hasBits0 & 128) != 0) { return varIndex2_; } else { return VarIndex2DefaultValue; } }
    set {
      _hasBits0 |= 128;
      varIndex2_ = value;
    }
  }
  /// <summary>Gets whether the "var_index_2" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarIndex2 {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "var_index_2" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarIndex2() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "var_level_2" field.</summary>
  public const int VarLevel2FieldNumber = 10;
  private readonly static int VarLevel2DefaultValue = 0;

  private int varLevel2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarLevel2 {
    get { if ((_hasBits0 & 256) != 0) { return varLevel2_; } else { return VarLevel2DefaultValue; } }
    set {
      _hasBits0 |= 256;
      varLevel2_ = value;
    }
  }
  /// <summary>Gets whether the "var_level_2" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarLevel2 {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "var_level_2" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarLevel2() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "var_level_point_2" field.</summary>
  public const int VarLevelPoint2FieldNumber = 11;
  private readonly static int VarLevelPoint2DefaultValue = 0;

  private int varLevelPoint2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarLevelPoint2 {
    get { if ((_hasBits0 & 512) != 0) { return varLevelPoint2_; } else { return VarLevelPoint2DefaultValue; } }
    set {
      _hasBits0 |= 512;
      varLevelPoint2_ = value;
    }
  }
  /// <summary>Gets whether the "var_level_point_2" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarLevelPoint2 {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "var_level_point_2" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarLevelPoint2() {
    _hasBits0 &= ~512;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GAME_RESULT_NTY);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GAME_RESULT_NTY other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarIndex != other.VarIndex) return false;
    if (VarName != other.VarName) return false;
    if (VarCode != other.VarCode) return false;
    if (VarColor != other.VarColor) return false;
    if (VarIndex1 != other.VarIndex1) return false;
    if (VarLevel1 != other.VarLevel1) return false;
    if (VarLevelPoint1 != other.VarLevelPoint1) return false;
    if (VarIndex2 != other.VarIndex2) return false;
    if (VarLevel2 != other.VarLevel2) return false;
    if (VarLevelPoint2 != other.VarLevelPoint2) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarIndex) hash ^= VarIndex.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarColor) hash ^= VarColor.GetHashCode();
    if (HasVarIndex1) hash ^= VarIndex1.GetHashCode();
    if (HasVarLevel1) hash ^= VarLevel1.GetHashCode();
    if (HasVarLevelPoint1) hash ^= VarLevelPoint1.GetHashCode();
    if (HasVarIndex2) hash ^= VarIndex2.GetHashCode();
    if (HasVarLevel2) hash ^= VarLevel2.GetHashCode();
    if (HasVarLevelPoint2) hash ^= VarLevelPoint2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarIndex) {
      output.WriteRawTag(16);
      output.WriteInt64(VarIndex);
    }
    if (HasVarName) {
      output.WriteRawTag(26);
      output.WriteBytes(VarName);
    }
    if (HasVarCode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarColor) {
      output.WriteRawTag(40);
      output.WriteEnum((int) VarColor);
    }
    if (HasVarIndex1) {
      output.WriteRawTag(48);
      output.WriteInt64(VarIndex1);
    }
    if (HasVarLevel1) {
      output.WriteRawTag(56);
      output.WriteInt32(VarLevel1);
    }
    if (HasVarLevelPoint1) {
      output.WriteRawTag(64);
      output.WriteInt32(VarLevelPoint1);
    }
    if (HasVarIndex2) {
      output.WriteRawTag(72);
      output.WriteInt64(VarIndex2);
    }
    if (HasVarLevel2) {
      output.WriteRawTag(80);
      output.WriteInt32(VarLevel2);
    }
    if (HasVarLevelPoint2) {
      output.WriteRawTag(88);
      output.WriteInt32(VarLevelPoint2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarIndex) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarIndex);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarColor) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarColor);
    }
    if (HasVarIndex1) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarIndex1);
    }
    if (HasVarLevel1) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarLevel1);
    }
    if (HasVarLevelPoint1) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarLevelPoint1);
    }
    if (HasVarIndex2) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(VarIndex2);
    }
    if (HasVarLevel2) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarLevel2);
    }
    if (HasVarLevelPoint2) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarLevelPoint2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GAME_RESULT_NTY other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarIndex) {
      VarIndex = other.VarIndex;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarColor) {
      VarColor = other.VarColor;
    }
    if (other.HasVarIndex1) {
      VarIndex1 = other.VarIndex1;
    }
    if (other.HasVarLevel1) {
      VarLevel1 = other.VarLevel1;
    }
    if (other.HasVarLevelPoint1) {
      VarLevelPoint1 = other.VarLevelPoint1;
    }
    if (other.HasVarIndex2) {
      VarIndex2 = other.VarIndex2;
    }
    if (other.HasVarLevel2) {
      VarLevel2 = other.VarLevel2;
    }
    if (other.HasVarLevelPoint2) {
      VarLevelPoint2 = other.VarLevelPoint2;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarIndex = input.ReadInt64();
          break;
        }
        case 26: {
          VarName = input.ReadBytes();
          break;
        }
        case 32: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 40: {
          VarColor = (global::eTeam) input.ReadEnum();
          break;
        }
        case 48: {
          VarIndex1 = input.ReadInt64();
          break;
        }
        case 56: {
          VarLevel1 = input.ReadInt32();
          break;
        }
        case 64: {
          VarLevelPoint1 = input.ReadInt32();
          break;
        }
        case 72: {
          VarIndex2 = input.ReadInt64();
          break;
        }
        case 80: {
          VarLevel2 = input.ReadInt32();
          break;
        }
        case 88: {
          VarLevelPoint2 = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class RANK_RES : pb::IMessage<RANK_RES> {
  private static readonly pb::MessageParser<RANK_RES> _parser = new pb::MessageParser<RANK_RES>(() => new RANK_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RANK_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RANK_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RANK_RES(RANK_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varRankList_ = other.varRankList_.Clone();
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RANK_RES Clone() {
    return new RANK_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktRankRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_rank_list" field.</summary>
  public const int VarRankListFieldNumber = 2;
  private static readonly pb::FieldCodec<global::Rank> _repeated_varRankList_codec
      = pb::FieldCodec.ForMessage(18, global::Rank.Parser);
  private readonly pbc::RepeatedField<global::Rank> varRankList_ = new pbc::RepeatedField<global::Rank>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Rank> VarRankList {
    get { return varRankList_; }
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 3;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RANK_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RANK_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if(!varRankList_.Equals(other.varRankList_)) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    hash ^= varRankList_.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    varRankList_.WriteTo(output, _repeated_varRankList_codec);
    if (HasVarCode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    size += varRankList_.CalculateSize(_repeated_varRankList_codec);
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RANK_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    varRankList_.Add(other.varRankList_);
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          varRankList_.AddEntriesFrom(input, _repeated_varRankList_codec);
          break;
        }
        case 24: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class QNS_RES : pb::IMessage<QNS_RES> {
  private static readonly pb::MessageParser<QNS_RES> _parser = new pb::MessageParser<QNS_RES>(() => new QNS_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<QNS_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QNS_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QNS_RES(QNS_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public QNS_RES Clone() {
    return new QNS_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktQnsRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 3;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as QNS_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(QNS_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) VarCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(QNS_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 24: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class ROOM_PASS_THROUGH_RES : pb::IMessage<ROOM_PASS_THROUGH_RES> {
  private static readonly pb::MessageParser<ROOM_PASS_THROUGH_RES> _parser = new pb::MessageParser<ROOM_PASS_THROUGH_RES>(() => new ROOM_PASS_THROUGH_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ROOM_PASS_THROUGH_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_PASS_THROUGH_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_PASS_THROUGH_RES(ROOM_PASS_THROUGH_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varMessage_ = other.varMessage_;
    varMessageInt_ = other.varMessageInt_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ROOM_PASS_THROUGH_RES Clone() {
    return new ROOM_PASS_THROUGH_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktRoomPassThroughRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 3;
  private readonly static pb::ByteString VarMessageDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarMessage {
    get { return varMessage_ ?? VarMessageDefaultValue; }
    set {
      varMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessage {
    get { return varMessage_ != null; }
  }
  /// <summary>Clears the value of the "var_message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessage() {
    varMessage_ = null;
  }

  /// <summary>Field number for the "var_message_int" field.</summary>
  public const int VarMessageIntFieldNumber = 4;
  private readonly static int VarMessageIntDefaultValue = 0;

  private int varMessageInt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VarMessageInt {
    get { if ((_hasBits0 & 4) != 0) { return varMessageInt_; } else { return VarMessageIntDefaultValue; } }
    set {
      _hasBits0 |= 4;
      varMessageInt_ = value;
    }
  }
  /// <summary>Gets whether the "var_message_int" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessageInt {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "var_message_int" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessageInt() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ROOM_PASS_THROUGH_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ROOM_PASS_THROUGH_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if (VarMessage != other.VarMessage) return false;
    if (VarMessageInt != other.VarMessageInt) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarMessage) hash ^= VarMessage.GetHashCode();
    if (HasVarMessageInt) hash ^= VarMessageInt.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarMessage) {
      output.WriteRawTag(26);
      output.WriteBytes(VarMessage);
    }
    if (HasVarMessageInt) {
      output.WriteRawTag(32);
      output.WriteInt32(VarMessageInt);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarMessage) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarMessage);
    }
    if (HasVarMessageInt) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VarMessageInt);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ROOM_PASS_THROUGH_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarMessage) {
      VarMessage = other.VarMessage;
    }
    if (other.HasVarMessageInt) {
      VarMessageInt = other.VarMessageInt;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          VarMessage = input.ReadBytes();
          break;
        }
        case 32: {
          VarMessageInt = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CANCEL_MATCH_RES : pb::IMessage<CANCEL_MATCH_RES> {
  private static readonly pb::MessageParser<CANCEL_MATCH_RES> _parser = new pb::MessageParser<CANCEL_MATCH_RES>(() => new CANCEL_MATCH_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CANCEL_MATCH_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CANCEL_MATCH_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CANCEL_MATCH_RES(CANCEL_MATCH_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CANCEL_MATCH_RES Clone() {
    return new CANCEL_MATCH_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktCancelMatchRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CANCEL_MATCH_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CANCEL_MATCH_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CANCEL_MATCH_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class NOTICE_RES : pb::IMessage<NOTICE_RES> {
  private static readonly pb::MessageParser<NOTICE_RES> _parser = new pb::MessageParser<NOTICE_RES>(() => new NOTICE_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NOTICE_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NOTICE_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NOTICE_RES(NOTICE_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varMessage_ = other.varMessage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NOTICE_RES Clone() {
    return new NOTICE_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktNoticeRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 2;
  private readonly static pb::ByteString VarMessageDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varMessage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarMessage {
    get { return varMessage_ ?? VarMessageDefaultValue; }
    set {
      varMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarMessage {
    get { return varMessage_ != null; }
  }
  /// <summary>Clears the value of the "var_message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarMessage() {
    varMessage_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NOTICE_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NOTICE_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarMessage != other.VarMessage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarMessage) hash ^= VarMessage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarMessage) {
      output.WriteRawTag(18);
      output.WriteBytes(VarMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarMessage) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarMessage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NOTICE_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarMessage) {
      VarMessage = other.VarMessage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 18: {
          VarMessage = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class CHECK_NICKNAME_RES : pb::IMessage<CHECK_NICKNAME_RES> {
  private static readonly pb::MessageParser<CHECK_NICKNAME_RES> _parser = new pb::MessageParser<CHECK_NICKNAME_RES>(() => new CHECK_NICKNAME_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CHECK_NICKNAME_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CHECK_NICKNAME_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CHECK_NICKNAME_RES(CHECK_NICKNAME_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varName_ = other.varName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CHECK_NICKNAME_RES Clone() {
    return new CHECK_NICKNAME_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktCheckNicknameRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 3;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CHECK_NICKNAME_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CHECK_NICKNAME_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if (VarName != other.VarName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    if (HasVarName) {
      output.WriteRawTag(26);
      output.WriteBytes(VarName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CHECK_NICKNAME_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          VarName = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class BITMAP_MESSAGE_RES : pb::IMessage<BITMAP_MESSAGE_RES> {
  private static readonly pb::MessageParser<BITMAP_MESSAGE_RES> _parser = new pb::MessageParser<BITMAP_MESSAGE_RES>(() => new BITMAP_MESSAGE_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BITMAP_MESSAGE_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BITMAP_MESSAGE_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BITMAP_MESSAGE_RES(BITMAP_MESSAGE_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varMessage_ = other.varMessage_.Clone();
    varName_ = other.varName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BITMAP_MESSAGE_RES Clone() {
    return new BITMAP_MESSAGE_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktBitmapMessageRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 3;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_varMessage_codec
      = pb::FieldCodec.ForBytes(26);
  private readonly pbc::RepeatedField<pb::ByteString> varMessage_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> VarMessage {
    get { return varMessage_; }
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 4;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BITMAP_MESSAGE_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BITMAP_MESSAGE_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if(!varMessage_.Equals(other.varMessage_)) return false;
    if (VarName != other.VarName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    hash ^= varMessage_.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    varMessage_.WriteTo(output, _repeated_varMessage_codec);
    if (HasVarName) {
      output.WriteRawTag(34);
      output.WriteBytes(VarName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    size += varMessage_.CalculateSize(_repeated_varMessage_codec);
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BITMAP_MESSAGE_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    varMessage_.Add(other.varMessage_);
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          varMessage_.AddEntriesFrom(input, _repeated_varMessage_codec);
          break;
        }
        case 34: {
          VarName = input.ReadBytes();
          break;
        }
      }
    }
  }

}

public sealed partial class AUDIO_MESSAGE_RES : pb::IMessage<AUDIO_MESSAGE_RES> {
  private static readonly pb::MessageParser<AUDIO_MESSAGE_RES> _parser = new pb::MessageParser<AUDIO_MESSAGE_RES>(() => new AUDIO_MESSAGE_RES());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AUDIO_MESSAGE_RES> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GSCLIReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AUDIO_MESSAGE_RES() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AUDIO_MESSAGE_RES(AUDIO_MESSAGE_RES other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    varCode_ = other.varCode_;
    varMessage_ = other.varMessage_.Clone();
    varName_ = other.varName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AUDIO_MESSAGE_RES Clone() {
    return new AUDIO_MESSAGE_RES(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static global::PROTOCOL IdDefaultValue = global::PROTOCOL.IdPktAudioMessageRes;

  private global::PROTOCOL id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PROTOCOL Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "var_code" field.</summary>
  public const int VarCodeFieldNumber = 2;
  private readonly static global::ErrorCode VarCodeDefaultValue = global::ErrorCode.Success;

  private global::ErrorCode varCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ErrorCode VarCode {
    get { if ((_hasBits0 & 2) != 0) { return varCode_; } else { return VarCodeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      varCode_ = value;
    }
  }
  /// <summary>Gets whether the "var_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarCode {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "var_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarCode() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "var_message" field.</summary>
  public const int VarMessageFieldNumber = 3;
  private static readonly pb::FieldCodec<pb::ByteString> _repeated_varMessage_codec
      = pb::FieldCodec.ForBytes(26);
  private readonly pbc::RepeatedField<pb::ByteString> varMessage_ = new pbc::RepeatedField<pb::ByteString>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<pb::ByteString> VarMessage {
    get { return varMessage_; }
  }

  /// <summary>Field number for the "var_name" field.</summary>
  public const int VarNameFieldNumber = 4;
  private readonly static pb::ByteString VarNameDefaultValue = pb::ByteString.Empty;

  private pb::ByteString varName_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString VarName {
    get { return varName_ ?? VarNameDefaultValue; }
    set {
      varName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "var_name" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVarName {
    get { return varName_ != null; }
  }
  /// <summary>Clears the value of the "var_name" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVarName() {
    varName_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AUDIO_MESSAGE_RES);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AUDIO_MESSAGE_RES other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (VarCode != other.VarCode) return false;
    if(!varMessage_.Equals(other.varMessage_)) return false;
    if (VarName != other.VarName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasVarCode) hash ^= VarCode.GetHashCode();
    hash ^= varMessage_.GetHashCode();
    if (HasVarName) hash ^= VarName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Id);
    }
    if (HasVarCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) VarCode);
    }
    varMessage_.WriteTo(output, _repeated_varMessage_codec);
    if (HasVarName) {
      output.WriteRawTag(34);
      output.WriteBytes(VarName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Id);
    }
    if (HasVarCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarCode);
    }
    size += varMessage_.CalculateSize(_repeated_varMessage_codec);
    if (HasVarName) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(VarName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AUDIO_MESSAGE_RES other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasVarCode) {
      VarCode = other.VarCode;
    }
    varMessage_.Add(other.varMessage_);
    if (other.HasVarName) {
      VarName = other.VarName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = (global::PROTOCOL) input.ReadEnum();
          break;
        }
        case 16: {
          VarCode = (global::ErrorCode) input.ReadEnum();
          break;
        }
        case 26: {
          varMessage_.AddEntriesFrom(input, _repeated_varMessage_codec);
          break;
        }
        case 34: {
          VarName = input.ReadBytes();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
