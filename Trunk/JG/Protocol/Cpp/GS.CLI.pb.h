// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GS.CLI.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GS_2eCLI_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GS_2eCLI_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Structure.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GS_2eCLI_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GS_2eCLI_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GS_2eCLI_2eproto;
class BROADCAST_ROOM_MESSAGE_RES;
class BROADCAST_ROOM_MESSAGE_RESDefaultTypeInternal;
extern BROADCAST_ROOM_MESSAGE_RESDefaultTypeInternal _BROADCAST_ROOM_MESSAGE_RES_default_instance_;
class CREATE_ROOM_RES;
class CREATE_ROOM_RESDefaultTypeInternal;
extern CREATE_ROOM_RESDefaultTypeInternal _CREATE_ROOM_RES_default_instance_;
class ENTER_ROOM_RES;
class ENTER_ROOM_RESDefaultTypeInternal;
extern ENTER_ROOM_RESDefaultTypeInternal _ENTER_ROOM_RES_default_instance_;
class GAME_RESULT_NTY;
class GAME_RESULT_NTYDefaultTypeInternal;
extern GAME_RESULT_NTYDefaultTypeInternal _GAME_RESULT_NTY_default_instance_;
class LEAVE_ROOM_RES;
class LEAVE_ROOM_RESDefaultTypeInternal;
extern LEAVE_ROOM_RESDefaultTypeInternal _LEAVE_ROOM_RES_default_instance_;
class LOGIN_RES;
class LOGIN_RESDefaultTypeInternal;
extern LOGIN_RESDefaultTypeInternal _LOGIN_RES_default_instance_;
class MATCH_RES;
class MATCH_RESDefaultTypeInternal;
extern MATCH_RESDefaultTypeInternal _MATCH_RES_default_instance_;
class NEW_USER_IN_ROOM_NTY;
class NEW_USER_IN_ROOM_NTYDefaultTypeInternal;
extern NEW_USER_IN_ROOM_NTYDefaultTypeInternal _NEW_USER_IN_ROOM_NTY_default_instance_;
class ROOM_LIST_RES;
class ROOM_LIST_RESDefaultTypeInternal;
extern ROOM_LIST_RESDefaultTypeInternal _ROOM_LIST_RES_default_instance_;
class VERSION_RES;
class VERSION_RESDefaultTypeInternal;
extern VERSION_RESDefaultTypeInternal _VERSION_RES_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BROADCAST_ROOM_MESSAGE_RES* Arena::CreateMaybeMessage<::BROADCAST_ROOM_MESSAGE_RES>(Arena*);
template<> ::CREATE_ROOM_RES* Arena::CreateMaybeMessage<::CREATE_ROOM_RES>(Arena*);
template<> ::ENTER_ROOM_RES* Arena::CreateMaybeMessage<::ENTER_ROOM_RES>(Arena*);
template<> ::GAME_RESULT_NTY* Arena::CreateMaybeMessage<::GAME_RESULT_NTY>(Arena*);
template<> ::LEAVE_ROOM_RES* Arena::CreateMaybeMessage<::LEAVE_ROOM_RES>(Arena*);
template<> ::LOGIN_RES* Arena::CreateMaybeMessage<::LOGIN_RES>(Arena*);
template<> ::MATCH_RES* Arena::CreateMaybeMessage<::MATCH_RES>(Arena*);
template<> ::NEW_USER_IN_ROOM_NTY* Arena::CreateMaybeMessage<::NEW_USER_IN_ROOM_NTY>(Arena*);
template<> ::ROOM_LIST_RES* Arena::CreateMaybeMessage<::ROOM_LIST_RES>(Arena*);
template<> ::VERSION_RES* Arena::CreateMaybeMessage<::VERSION_RES>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class VERSION_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:VERSION_RES) */ {
 public:
  VERSION_RES();
  virtual ~VERSION_RES();

  VERSION_RES(const VERSION_RES& from);
  VERSION_RES(VERSION_RES&& from) noexcept
    : VERSION_RES() {
    *this = ::std::move(from);
  }

  inline VERSION_RES& operator=(const VERSION_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline VERSION_RES& operator=(VERSION_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VERSION_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VERSION_RES* internal_default_instance() {
    return reinterpret_cast<const VERSION_RES*>(
               &_VERSION_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VERSION_RES& a, VERSION_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(VERSION_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VERSION_RES* New() const final {
    return CreateMaybeMessage<VERSION_RES>(nullptr);
  }

  VERSION_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VERSION_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VERSION_RES& from);
  void MergeFrom(const VERSION_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VERSION_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "VERSION_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarVersionFieldNumber = 2,
    kVarCodeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional float var_version = 2;
  bool has_var_version() const;
  private:
  bool _internal_has_var_version() const;
  public:
  void clear_var_version();
  float var_version() const;
  void set_var_version(float value);
  private:
  float _internal_var_version() const;
  void _internal_set_var_version(float value);
  public:

  // optional .ErrorCode var_code = 3;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:VERSION_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float var_version_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class LOGIN_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LOGIN_RES) */ {
 public:
  LOGIN_RES();
  virtual ~LOGIN_RES();

  LOGIN_RES(const LOGIN_RES& from);
  LOGIN_RES(LOGIN_RES&& from) noexcept
    : LOGIN_RES() {
    *this = ::std::move(from);
  }

  inline LOGIN_RES& operator=(const LOGIN_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline LOGIN_RES& operator=(LOGIN_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LOGIN_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LOGIN_RES* internal_default_instance() {
    return reinterpret_cast<const LOGIN_RES*>(
               &_LOGIN_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LOGIN_RES& a, LOGIN_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(LOGIN_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LOGIN_RES* New() const final {
    return CreateMaybeMessage<LOGIN_RES>(nullptr);
  }

  LOGIN_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LOGIN_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LOGIN_RES& from);
  void MergeFrom(const LOGIN_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LOGIN_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LOGIN_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarIndexFieldNumber = 3,
    kVarCodeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional int64 var_index = 3;
  bool has_var_index() const;
  private:
  bool _internal_has_var_index() const;
  public:
  void clear_var_index();
  ::PROTOBUF_NAMESPACE_ID::int64 var_index() const;
  void set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_var_index() const;
  void _internal_set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:LOGIN_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 var_index_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class CREATE_ROOM_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CREATE_ROOM_RES) */ {
 public:
  CREATE_ROOM_RES();
  virtual ~CREATE_ROOM_RES();

  CREATE_ROOM_RES(const CREATE_ROOM_RES& from);
  CREATE_ROOM_RES(CREATE_ROOM_RES&& from) noexcept
    : CREATE_ROOM_RES() {
    *this = ::std::move(from);
  }

  inline CREATE_ROOM_RES& operator=(const CREATE_ROOM_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline CREATE_ROOM_RES& operator=(CREATE_ROOM_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CREATE_ROOM_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CREATE_ROOM_RES* internal_default_instance() {
    return reinterpret_cast<const CREATE_ROOM_RES*>(
               &_CREATE_ROOM_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CREATE_ROOM_RES& a, CREATE_ROOM_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(CREATE_ROOM_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CREATE_ROOM_RES* New() const final {
    return CreateMaybeMessage<CREATE_ROOM_RES>(nullptr);
  }

  CREATE_ROOM_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CREATE_ROOM_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CREATE_ROOM_RES& from);
  void MergeFrom(const CREATE_ROOM_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CREATE_ROOM_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CREATE_ROOM_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 2,
    kVarRoomIdFieldNumber = 3,
    kVarCodeFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // optional bytes var_name = 2;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const void* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional int32 var_room_id = 3;
  bool has_var_room_id() const;
  private:
  bool _internal_has_var_room_id() const;
  public:
  void clear_var_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_id() const;
  void set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_room_id() const;
  void _internal_set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .ErrorCode var_code = 4;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:CREATE_ROOM_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_id_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class ENTER_ROOM_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ENTER_ROOM_RES) */ {
 public:
  ENTER_ROOM_RES();
  virtual ~ENTER_ROOM_RES();

  ENTER_ROOM_RES(const ENTER_ROOM_RES& from);
  ENTER_ROOM_RES(ENTER_ROOM_RES&& from) noexcept
    : ENTER_ROOM_RES() {
    *this = ::std::move(from);
  }

  inline ENTER_ROOM_RES& operator=(const ENTER_ROOM_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline ENTER_ROOM_RES& operator=(ENTER_ROOM_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ENTER_ROOM_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ENTER_ROOM_RES* internal_default_instance() {
    return reinterpret_cast<const ENTER_ROOM_RES*>(
               &_ENTER_ROOM_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ENTER_ROOM_RES& a, ENTER_ROOM_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(ENTER_ROOM_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ENTER_ROOM_RES* New() const final {
    return CreateMaybeMessage<ENTER_ROOM_RES>(nullptr);
  }

  ENTER_ROOM_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ENTER_ROOM_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ENTER_ROOM_RES& from);
  void MergeFrom(const ENTER_ROOM_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ENTER_ROOM_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ENTER_ROOM_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 2,
    kVarRoomIdFieldNumber = 3,
    kVarCodeFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // optional bytes var_name = 2;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const void* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional int32 var_room_id = 3;
  bool has_var_room_id() const;
  private:
  bool _internal_has_var_room_id() const;
  public:
  void clear_var_room_id();
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_id() const;
  void set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_room_id() const;
  void _internal_set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .ErrorCode var_code = 4;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:ENTER_ROOM_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_room_id_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class NEW_USER_IN_ROOM_NTY :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NEW_USER_IN_ROOM_NTY) */ {
 public:
  NEW_USER_IN_ROOM_NTY();
  virtual ~NEW_USER_IN_ROOM_NTY();

  NEW_USER_IN_ROOM_NTY(const NEW_USER_IN_ROOM_NTY& from);
  NEW_USER_IN_ROOM_NTY(NEW_USER_IN_ROOM_NTY&& from) noexcept
    : NEW_USER_IN_ROOM_NTY() {
    *this = ::std::move(from);
  }

  inline NEW_USER_IN_ROOM_NTY& operator=(const NEW_USER_IN_ROOM_NTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline NEW_USER_IN_ROOM_NTY& operator=(NEW_USER_IN_ROOM_NTY&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NEW_USER_IN_ROOM_NTY& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NEW_USER_IN_ROOM_NTY* internal_default_instance() {
    return reinterpret_cast<const NEW_USER_IN_ROOM_NTY*>(
               &_NEW_USER_IN_ROOM_NTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NEW_USER_IN_ROOM_NTY& a, NEW_USER_IN_ROOM_NTY& b) {
    a.Swap(&b);
  }
  inline void Swap(NEW_USER_IN_ROOM_NTY* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NEW_USER_IN_ROOM_NTY* New() const final {
    return CreateMaybeMessage<NEW_USER_IN_ROOM_NTY>(nullptr);
  }

  NEW_USER_IN_ROOM_NTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NEW_USER_IN_ROOM_NTY>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NEW_USER_IN_ROOM_NTY& from);
  void MergeFrom(const NEW_USER_IN_ROOM_NTY& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NEW_USER_IN_ROOM_NTY* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NEW_USER_IN_ROOM_NTY";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarRoomUserFieldNumber = 2,
    kVarCodeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional .RoomUserInfo var_room_user = 2;
  bool has_var_room_user() const;
  private:
  bool _internal_has_var_room_user() const;
  public:
  void clear_var_room_user();
  const ::RoomUserInfo& var_room_user() const;
  ::RoomUserInfo* release_var_room_user();
  ::RoomUserInfo* mutable_var_room_user();
  void set_allocated_var_room_user(::RoomUserInfo* var_room_user);
  private:
  const ::RoomUserInfo& _internal_var_room_user() const;
  ::RoomUserInfo* _internal_mutable_var_room_user();
  public:

  // optional .ErrorCode var_code = 3;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_NEW_USER_IN_ROOM_NTY];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:NEW_USER_IN_ROOM_NTY)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::RoomUserInfo* var_room_user_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class LEAVE_ROOM_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LEAVE_ROOM_RES) */ {
 public:
  LEAVE_ROOM_RES();
  virtual ~LEAVE_ROOM_RES();

  LEAVE_ROOM_RES(const LEAVE_ROOM_RES& from);
  LEAVE_ROOM_RES(LEAVE_ROOM_RES&& from) noexcept
    : LEAVE_ROOM_RES() {
    *this = ::std::move(from);
  }

  inline LEAVE_ROOM_RES& operator=(const LEAVE_ROOM_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline LEAVE_ROOM_RES& operator=(LEAVE_ROOM_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LEAVE_ROOM_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LEAVE_ROOM_RES* internal_default_instance() {
    return reinterpret_cast<const LEAVE_ROOM_RES*>(
               &_LEAVE_ROOM_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LEAVE_ROOM_RES& a, LEAVE_ROOM_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(LEAVE_ROOM_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LEAVE_ROOM_RES* New() const final {
    return CreateMaybeMessage<LEAVE_ROOM_RES>(nullptr);
  }

  LEAVE_ROOM_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LEAVE_ROOM_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LEAVE_ROOM_RES& from);
  void MergeFrom(const LEAVE_ROOM_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LEAVE_ROOM_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LEAVE_ROOM_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 2,
    kVarIndexFieldNumber = 4,
    kVarCodeFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // optional bytes var_name = 2;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const void* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional int64 var_index = 4;
  bool has_var_index() const;
  private:
  bool _internal_has_var_index() const;
  public:
  void clear_var_index();
  ::PROTOBUF_NAMESPACE_ID::int64 var_index() const;
  void set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_var_index() const;
  void _internal_set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .ErrorCode var_code = 3;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:LEAVE_ROOM_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 var_index_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class BROADCAST_ROOM_MESSAGE_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BROADCAST_ROOM_MESSAGE_RES) */ {
 public:
  BROADCAST_ROOM_MESSAGE_RES();
  virtual ~BROADCAST_ROOM_MESSAGE_RES();

  BROADCAST_ROOM_MESSAGE_RES(const BROADCAST_ROOM_MESSAGE_RES& from);
  BROADCAST_ROOM_MESSAGE_RES(BROADCAST_ROOM_MESSAGE_RES&& from) noexcept
    : BROADCAST_ROOM_MESSAGE_RES() {
    *this = ::std::move(from);
  }

  inline BROADCAST_ROOM_MESSAGE_RES& operator=(const BROADCAST_ROOM_MESSAGE_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline BROADCAST_ROOM_MESSAGE_RES& operator=(BROADCAST_ROOM_MESSAGE_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BROADCAST_ROOM_MESSAGE_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BROADCAST_ROOM_MESSAGE_RES* internal_default_instance() {
    return reinterpret_cast<const BROADCAST_ROOM_MESSAGE_RES*>(
               &_BROADCAST_ROOM_MESSAGE_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BROADCAST_ROOM_MESSAGE_RES& a, BROADCAST_ROOM_MESSAGE_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(BROADCAST_ROOM_MESSAGE_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BROADCAST_ROOM_MESSAGE_RES* New() const final {
    return CreateMaybeMessage<BROADCAST_ROOM_MESSAGE_RES>(nullptr);
  }

  BROADCAST_ROOM_MESSAGE_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BROADCAST_ROOM_MESSAGE_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BROADCAST_ROOM_MESSAGE_RES& from);
  void MergeFrom(const BROADCAST_ROOM_MESSAGE_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BROADCAST_ROOM_MESSAGE_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BROADCAST_ROOM_MESSAGE_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarMessageFieldNumber = 3,
    kVarNameFieldNumber = 4,
    kVarCodeFieldNumber = 2,
    kVarXFieldNumber = 5,
    kVarYFieldNumber = 6,
    kVarColorFieldNumber = 7,
    kIdFieldNumber = 1,
  };
  // optional bytes var_message = 3;
  bool has_var_message() const;
  private:
  bool _internal_has_var_message() const;
  public:
  void clear_var_message();
  const std::string& var_message() const;
  void set_var_message(const std::string& value);
  void set_var_message(std::string&& value);
  void set_var_message(const char* value);
  void set_var_message(const void* value, size_t size);
  std::string* mutable_var_message();
  std::string* release_var_message();
  void set_allocated_var_message(std::string* var_message);
  private:
  const std::string& _internal_var_message() const;
  void _internal_set_var_message(const std::string& value);
  std::string* _internal_mutable_var_message();
  public:

  // optional bytes var_name = 4;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const void* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional int32 var_x = 5;
  bool has_var_x() const;
  private:
  bool _internal_has_var_x() const;
  public:
  void clear_var_x();
  ::PROTOBUF_NAMESPACE_ID::int32 var_x() const;
  void set_var_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_x() const;
  void _internal_set_var_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 var_y = 6;
  bool has_var_y() const;
  private:
  bool _internal_has_var_y() const;
  public:
  void clear_var_y();
  ::PROTOBUF_NAMESPACE_ID::int32 var_y() const;
  void set_var_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_var_y() const;
  void _internal_set_var_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .eTeam var_color = 7;
  bool has_var_color() const;
  private:
  bool _internal_has_var_color() const;
  public:
  void clear_var_color();
  ::eTeam var_color() const;
  void set_var_color(::eTeam value);
  private:
  ::eTeam _internal_var_color() const;
  void _internal_set_var_color(::eTeam value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_BROADCAST_ROOM_MESSAGE_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:BROADCAST_ROOM_MESSAGE_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  int var_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 var_y_;
  int var_color_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class ROOM_LIST_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ROOM_LIST_RES) */ {
 public:
  ROOM_LIST_RES();
  virtual ~ROOM_LIST_RES();

  ROOM_LIST_RES(const ROOM_LIST_RES& from);
  ROOM_LIST_RES(ROOM_LIST_RES&& from) noexcept
    : ROOM_LIST_RES() {
    *this = ::std::move(from);
  }

  inline ROOM_LIST_RES& operator=(const ROOM_LIST_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROOM_LIST_RES& operator=(ROOM_LIST_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROOM_LIST_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ROOM_LIST_RES* internal_default_instance() {
    return reinterpret_cast<const ROOM_LIST_RES*>(
               &_ROOM_LIST_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ROOM_LIST_RES& a, ROOM_LIST_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(ROOM_LIST_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROOM_LIST_RES* New() const final {
    return CreateMaybeMessage<ROOM_LIST_RES>(nullptr);
  }

  ROOM_LIST_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROOM_LIST_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROOM_LIST_RES& from);
  void MergeFrom(const ROOM_LIST_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROOM_LIST_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ROOM_LIST_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarRoomListFieldNumber = 3,
    kVarCodeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .RoomInfo2 var_room_list = 3;
  int var_room_list_size() const;
  private:
  int _internal_var_room_list_size() const;
  public:
  void clear_var_room_list();
  ::RoomInfo2* mutable_var_room_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomInfo2 >*
      mutable_var_room_list();
  private:
  const ::RoomInfo2& _internal_var_room_list(int index) const;
  ::RoomInfo2* _internal_add_var_room_list();
  public:
  const ::RoomInfo2& var_room_list(int index) const;
  ::RoomInfo2* add_var_room_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomInfo2 >&
      var_room_list() const;

  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:ROOM_LIST_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomInfo2 > var_room_list_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class MATCH_RES :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MATCH_RES) */ {
 public:
  MATCH_RES();
  virtual ~MATCH_RES();

  MATCH_RES(const MATCH_RES& from);
  MATCH_RES(MATCH_RES&& from) noexcept
    : MATCH_RES() {
    *this = ::std::move(from);
  }

  inline MATCH_RES& operator=(const MATCH_RES& from) {
    CopyFrom(from);
    return *this;
  }
  inline MATCH_RES& operator=(MATCH_RES&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MATCH_RES& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MATCH_RES* internal_default_instance() {
    return reinterpret_cast<const MATCH_RES*>(
               &_MATCH_RES_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MATCH_RES& a, MATCH_RES& b) {
    a.Swap(&b);
  }
  inline void Swap(MATCH_RES* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MATCH_RES* New() const final {
    return CreateMaybeMessage<MATCH_RES>(nullptr);
  }

  MATCH_RES* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MATCH_RES>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MATCH_RES& from);
  void MergeFrom(const MATCH_RES& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MATCH_RES* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MATCH_RES";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarCodeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // optional .ErrorCode var_code = 2;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_MATCH_RES];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:MATCH_RES)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int var_code_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// -------------------------------------------------------------------

class GAME_RESULT_NTY :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GAME_RESULT_NTY) */ {
 public:
  GAME_RESULT_NTY();
  virtual ~GAME_RESULT_NTY();

  GAME_RESULT_NTY(const GAME_RESULT_NTY& from);
  GAME_RESULT_NTY(GAME_RESULT_NTY&& from) noexcept
    : GAME_RESULT_NTY() {
    *this = ::std::move(from);
  }

  inline GAME_RESULT_NTY& operator=(const GAME_RESULT_NTY& from) {
    CopyFrom(from);
    return *this;
  }
  inline GAME_RESULT_NTY& operator=(GAME_RESULT_NTY&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GAME_RESULT_NTY& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GAME_RESULT_NTY* internal_default_instance() {
    return reinterpret_cast<const GAME_RESULT_NTY*>(
               &_GAME_RESULT_NTY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GAME_RESULT_NTY& a, GAME_RESULT_NTY& b) {
    a.Swap(&b);
  }
  inline void Swap(GAME_RESULT_NTY* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GAME_RESULT_NTY* New() const final {
    return CreateMaybeMessage<GAME_RESULT_NTY>(nullptr);
  }

  GAME_RESULT_NTY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GAME_RESULT_NTY>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GAME_RESULT_NTY& from);
  void MergeFrom(const GAME_RESULT_NTY& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GAME_RESULT_NTY* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GAME_RESULT_NTY";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GS_2eCLI_2eproto);
    return ::descriptor_table_GS_2eCLI_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarNameFieldNumber = 3,
    kVarIndexFieldNumber = 2,
    kVarCodeFieldNumber = 4,
    kVarColorFieldNumber = 5,
    kIdFieldNumber = 1,
  };
  // optional bytes var_name = 3;
  bool has_var_name() const;
  private:
  bool _internal_has_var_name() const;
  public:
  void clear_var_name();
  const std::string& var_name() const;
  void set_var_name(const std::string& value);
  void set_var_name(std::string&& value);
  void set_var_name(const char* value);
  void set_var_name(const void* value, size_t size);
  std::string* mutable_var_name();
  std::string* release_var_name();
  void set_allocated_var_name(std::string* var_name);
  private:
  const std::string& _internal_var_name() const;
  void _internal_set_var_name(const std::string& value);
  std::string* _internal_mutable_var_name();
  public:

  // optional int64 var_index = 2;
  bool has_var_index() const;
  private:
  bool _internal_has_var_index() const;
  public:
  void clear_var_index();
  ::PROTOBUF_NAMESPACE_ID::int64 var_index() const;
  void set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_var_index() const;
  void _internal_set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .ErrorCode var_code = 4;
  bool has_var_code() const;
  private:
  bool _internal_has_var_code() const;
  public:
  void clear_var_code();
  ::ErrorCode var_code() const;
  void set_var_code(::ErrorCode value);
  private:
  ::ErrorCode _internal_var_code() const;
  void _internal_set_var_code(::ErrorCode value);
  public:

  // optional .eTeam var_color = 5;
  bool has_var_color() const;
  private:
  bool _internal_has_var_color() const;
  public:
  void clear_var_color();
  ::eTeam var_color() const;
  void set_var_color(::eTeam value);
  private:
  ::eTeam _internal_var_color() const;
  void _internal_set_var_color(::eTeam value);
  public:

  // optional .PROTOCOL id = 1 [default = ID_PKT_GAME_RESULT_NTY];
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOCOL id() const;
  void set_id(::PROTOCOL value);
  private:
  ::PROTOCOL _internal_id() const;
  void _internal_set_id(::PROTOCOL value);
  public:

  // @@protoc_insertion_point(class_scope:GAME_RESULT_NTY)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr var_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 var_index_;
  int var_code_;
  int var_color_;
  int id_;
  friend struct ::TableStruct_GS_2eCLI_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VERSION_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_RES];
inline bool VERSION_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VERSION_RES::has_id() const {
  return _internal_has_id();
}
inline void VERSION_RES::clear_id() {
  id_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOCOL VERSION_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL VERSION_RES::id() const {
  // @@protoc_insertion_point(field_get:VERSION_RES.id)
  return _internal_id();
}
inline void VERSION_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void VERSION_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:VERSION_RES.id)
}

// optional float var_version = 2;
inline bool VERSION_RES::_internal_has_var_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VERSION_RES::has_var_version() const {
  return _internal_has_var_version();
}
inline void VERSION_RES::clear_var_version() {
  var_version_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float VERSION_RES::_internal_var_version() const {
  return var_version_;
}
inline float VERSION_RES::var_version() const {
  // @@protoc_insertion_point(field_get:VERSION_RES.var_version)
  return _internal_var_version();
}
inline void VERSION_RES::_internal_set_var_version(float value) {
  _has_bits_[0] |= 0x00000001u;
  var_version_ = value;
}
inline void VERSION_RES::set_var_version(float value) {
  _internal_set_var_version(value);
  // @@protoc_insertion_point(field_set:VERSION_RES.var_version)
}

// optional .ErrorCode var_code = 3;
inline bool VERSION_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VERSION_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void VERSION_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ErrorCode VERSION_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode VERSION_RES::var_code() const {
  // @@protoc_insertion_point(field_get:VERSION_RES.var_code)
  return _internal_var_code();
}
inline void VERSION_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  var_code_ = value;
}
inline void VERSION_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:VERSION_RES.var_code)
}

// -------------------------------------------------------------------

// LOGIN_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_RES];
inline bool LOGIN_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LOGIN_RES::has_id() const {
  return _internal_has_id();
}
inline void LOGIN_RES::clear_id() {
  id_ = 3;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOCOL LOGIN_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL LOGIN_RES::id() const {
  // @@protoc_insertion_point(field_get:LOGIN_RES.id)
  return _internal_id();
}
inline void LOGIN_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void LOGIN_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LOGIN_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool LOGIN_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LOGIN_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void LOGIN_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ErrorCode LOGIN_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode LOGIN_RES::var_code() const {
  // @@protoc_insertion_point(field_get:LOGIN_RES.var_code)
  return _internal_var_code();
}
inline void LOGIN_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  var_code_ = value;
}
inline void LOGIN_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:LOGIN_RES.var_code)
}

// optional int64 var_index = 3;
inline bool LOGIN_RES::_internal_has_var_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LOGIN_RES::has_var_index() const {
  return _internal_has_var_index();
}
inline void LOGIN_RES::clear_var_index() {
  var_index_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LOGIN_RES::_internal_var_index() const {
  return var_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LOGIN_RES::var_index() const {
  // @@protoc_insertion_point(field_get:LOGIN_RES.var_index)
  return _internal_var_index();
}
inline void LOGIN_RES::_internal_set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  var_index_ = value;
}
inline void LOGIN_RES::set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_var_index(value);
  // @@protoc_insertion_point(field_set:LOGIN_RES.var_index)
}

// -------------------------------------------------------------------

// CREATE_ROOM_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_RES];
inline bool CREATE_ROOM_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CREATE_ROOM_RES::has_id() const {
  return _internal_has_id();
}
inline void CREATE_ROOM_RES::clear_id() {
  id_ = 5;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOCOL CREATE_ROOM_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL CREATE_ROOM_RES::id() const {
  // @@protoc_insertion_point(field_get:CREATE_ROOM_RES.id)
  return _internal_id();
}
inline void CREATE_ROOM_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void CREATE_ROOM_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:CREATE_ROOM_RES.id)
}

// optional bytes var_name = 2;
inline bool CREATE_ROOM_RES::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CREATE_ROOM_RES::has_var_name() const {
  return _internal_has_var_name();
}
inline void CREATE_ROOM_RES::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CREATE_ROOM_RES::var_name() const {
  // @@protoc_insertion_point(field_get:CREATE_ROOM_RES.var_name)
  return _internal_var_name();
}
inline void CREATE_ROOM_RES::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:CREATE_ROOM_RES.var_name)
}
inline std::string* CREATE_ROOM_RES::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:CREATE_ROOM_RES.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& CREATE_ROOM_RES::_internal_var_name() const {
  return var_name_.GetNoArena();
}
inline void CREATE_ROOM_RES::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CREATE_ROOM_RES::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CREATE_ROOM_RES.var_name)
}
inline void CREATE_ROOM_RES::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CREATE_ROOM_RES.var_name)
}
inline void CREATE_ROOM_RES::set_var_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CREATE_ROOM_RES.var_name)
}
inline std::string* CREATE_ROOM_RES::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CREATE_ROOM_RES::release_var_name() {
  // @@protoc_insertion_point(field_release:CREATE_ROOM_RES.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CREATE_ROOM_RES::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:CREATE_ROOM_RES.var_name)
}

// optional int32 var_room_id = 3;
inline bool CREATE_ROOM_RES::_internal_has_var_room_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CREATE_ROOM_RES::has_var_room_id() const {
  return _internal_has_var_room_id();
}
inline void CREATE_ROOM_RES::clear_var_room_id() {
  var_room_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CREATE_ROOM_RES::_internal_var_room_id() const {
  return var_room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CREATE_ROOM_RES::var_room_id() const {
  // @@protoc_insertion_point(field_get:CREATE_ROOM_RES.var_room_id)
  return _internal_var_room_id();
}
inline void CREATE_ROOM_RES::_internal_set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  var_room_id_ = value;
}
inline void CREATE_ROOM_RES::set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_room_id(value);
  // @@protoc_insertion_point(field_set:CREATE_ROOM_RES.var_room_id)
}

// optional .ErrorCode var_code = 4;
inline bool CREATE_ROOM_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CREATE_ROOM_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void CREATE_ROOM_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ErrorCode CREATE_ROOM_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode CREATE_ROOM_RES::var_code() const {
  // @@protoc_insertion_point(field_get:CREATE_ROOM_RES.var_code)
  return _internal_var_code();
}
inline void CREATE_ROOM_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  var_code_ = value;
}
inline void CREATE_ROOM_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:CREATE_ROOM_RES.var_code)
}

// -------------------------------------------------------------------

// ENTER_ROOM_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_RES];
inline bool ENTER_ROOM_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ENTER_ROOM_RES::has_id() const {
  return _internal_has_id();
}
inline void ENTER_ROOM_RES::clear_id() {
  id_ = 7;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOCOL ENTER_ROOM_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL ENTER_ROOM_RES::id() const {
  // @@protoc_insertion_point(field_get:ENTER_ROOM_RES.id)
  return _internal_id();
}
inline void ENTER_ROOM_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void ENTER_ROOM_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ENTER_ROOM_RES.id)
}

// optional bytes var_name = 2;
inline bool ENTER_ROOM_RES::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ENTER_ROOM_RES::has_var_name() const {
  return _internal_has_var_name();
}
inline void ENTER_ROOM_RES::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ENTER_ROOM_RES::var_name() const {
  // @@protoc_insertion_point(field_get:ENTER_ROOM_RES.var_name)
  return _internal_var_name();
}
inline void ENTER_ROOM_RES::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:ENTER_ROOM_RES.var_name)
}
inline std::string* ENTER_ROOM_RES::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:ENTER_ROOM_RES.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& ENTER_ROOM_RES::_internal_var_name() const {
  return var_name_.GetNoArena();
}
inline void ENTER_ROOM_RES::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ENTER_ROOM_RES::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ENTER_ROOM_RES.var_name)
}
inline void ENTER_ROOM_RES::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ENTER_ROOM_RES.var_name)
}
inline void ENTER_ROOM_RES::set_var_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ENTER_ROOM_RES.var_name)
}
inline std::string* ENTER_ROOM_RES::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ENTER_ROOM_RES::release_var_name() {
  // @@protoc_insertion_point(field_release:ENTER_ROOM_RES.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ENTER_ROOM_RES::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:ENTER_ROOM_RES.var_name)
}

// optional int32 var_room_id = 3;
inline bool ENTER_ROOM_RES::_internal_has_var_room_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ENTER_ROOM_RES::has_var_room_id() const {
  return _internal_has_var_room_id();
}
inline void ENTER_ROOM_RES::clear_var_room_id() {
  var_room_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ENTER_ROOM_RES::_internal_var_room_id() const {
  return var_room_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ENTER_ROOM_RES::var_room_id() const {
  // @@protoc_insertion_point(field_get:ENTER_ROOM_RES.var_room_id)
  return _internal_var_room_id();
}
inline void ENTER_ROOM_RES::_internal_set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  var_room_id_ = value;
}
inline void ENTER_ROOM_RES::set_var_room_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_room_id(value);
  // @@protoc_insertion_point(field_set:ENTER_ROOM_RES.var_room_id)
}

// optional .ErrorCode var_code = 4;
inline bool ENTER_ROOM_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ENTER_ROOM_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void ENTER_ROOM_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ErrorCode ENTER_ROOM_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode ENTER_ROOM_RES::var_code() const {
  // @@protoc_insertion_point(field_get:ENTER_ROOM_RES.var_code)
  return _internal_var_code();
}
inline void ENTER_ROOM_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  var_code_ = value;
}
inline void ENTER_ROOM_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:ENTER_ROOM_RES.var_code)
}

// -------------------------------------------------------------------

// NEW_USER_IN_ROOM_NTY

// optional .PROTOCOL id = 1 [default = ID_PKT_NEW_USER_IN_ROOM_NTY];
inline bool NEW_USER_IN_ROOM_NTY::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NEW_USER_IN_ROOM_NTY::has_id() const {
  return _internal_has_id();
}
inline void NEW_USER_IN_ROOM_NTY::clear_id() {
  id_ = 12;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOCOL NEW_USER_IN_ROOM_NTY::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL NEW_USER_IN_ROOM_NTY::id() const {
  // @@protoc_insertion_point(field_get:NEW_USER_IN_ROOM_NTY.id)
  return _internal_id();
}
inline void NEW_USER_IN_ROOM_NTY::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void NEW_USER_IN_ROOM_NTY::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:NEW_USER_IN_ROOM_NTY.id)
}

// optional .RoomUserInfo var_room_user = 2;
inline bool NEW_USER_IN_ROOM_NTY::_internal_has_var_room_user() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || var_room_user_ != nullptr);
  return value;
}
inline bool NEW_USER_IN_ROOM_NTY::has_var_room_user() const {
  return _internal_has_var_room_user();
}
inline const ::RoomUserInfo& NEW_USER_IN_ROOM_NTY::_internal_var_room_user() const {
  const ::RoomUserInfo* p = var_room_user_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RoomUserInfo*>(
      &::_RoomUserInfo_default_instance_);
}
inline const ::RoomUserInfo& NEW_USER_IN_ROOM_NTY::var_room_user() const {
  // @@protoc_insertion_point(field_get:NEW_USER_IN_ROOM_NTY.var_room_user)
  return _internal_var_room_user();
}
inline ::RoomUserInfo* NEW_USER_IN_ROOM_NTY::release_var_room_user() {
  // @@protoc_insertion_point(field_release:NEW_USER_IN_ROOM_NTY.var_room_user)
  _has_bits_[0] &= ~0x00000001u;
  ::RoomUserInfo* temp = var_room_user_;
  var_room_user_ = nullptr;
  return temp;
}
inline ::RoomUserInfo* NEW_USER_IN_ROOM_NTY::_internal_mutable_var_room_user() {
  _has_bits_[0] |= 0x00000001u;
  if (var_room_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::RoomUserInfo>(GetArenaNoVirtual());
    var_room_user_ = p;
  }
  return var_room_user_;
}
inline ::RoomUserInfo* NEW_USER_IN_ROOM_NTY::mutable_var_room_user() {
  // @@protoc_insertion_point(field_mutable:NEW_USER_IN_ROOM_NTY.var_room_user)
  return _internal_mutable_var_room_user();
}
inline void NEW_USER_IN_ROOM_NTY::set_allocated_var_room_user(::RoomUserInfo* var_room_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(var_room_user_);
  }
  if (var_room_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      var_room_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, var_room_user, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_room_user_ = var_room_user;
  // @@protoc_insertion_point(field_set_allocated:NEW_USER_IN_ROOM_NTY.var_room_user)
}

// optional .ErrorCode var_code = 3;
inline bool NEW_USER_IN_ROOM_NTY::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NEW_USER_IN_ROOM_NTY::has_var_code() const {
  return _internal_has_var_code();
}
inline void NEW_USER_IN_ROOM_NTY::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::ErrorCode NEW_USER_IN_ROOM_NTY::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode NEW_USER_IN_ROOM_NTY::var_code() const {
  // @@protoc_insertion_point(field_get:NEW_USER_IN_ROOM_NTY.var_code)
  return _internal_var_code();
}
inline void NEW_USER_IN_ROOM_NTY::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  var_code_ = value;
}
inline void NEW_USER_IN_ROOM_NTY::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:NEW_USER_IN_ROOM_NTY.var_code)
}

// -------------------------------------------------------------------

// LEAVE_ROOM_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_RES];
inline bool LEAVE_ROOM_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LEAVE_ROOM_RES::has_id() const {
  return _internal_has_id();
}
inline void LEAVE_ROOM_RES::clear_id() {
  id_ = 9;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOCOL LEAVE_ROOM_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL LEAVE_ROOM_RES::id() const {
  // @@protoc_insertion_point(field_get:LEAVE_ROOM_RES.id)
  return _internal_id();
}
inline void LEAVE_ROOM_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void LEAVE_ROOM_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:LEAVE_ROOM_RES.id)
}

// optional bytes var_name = 2;
inline bool LEAVE_ROOM_RES::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LEAVE_ROOM_RES::has_var_name() const {
  return _internal_has_var_name();
}
inline void LEAVE_ROOM_RES::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LEAVE_ROOM_RES::var_name() const {
  // @@protoc_insertion_point(field_get:LEAVE_ROOM_RES.var_name)
  return _internal_var_name();
}
inline void LEAVE_ROOM_RES::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:LEAVE_ROOM_RES.var_name)
}
inline std::string* LEAVE_ROOM_RES::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:LEAVE_ROOM_RES.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& LEAVE_ROOM_RES::_internal_var_name() const {
  return var_name_.GetNoArena();
}
inline void LEAVE_ROOM_RES::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LEAVE_ROOM_RES::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LEAVE_ROOM_RES.var_name)
}
inline void LEAVE_ROOM_RES::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LEAVE_ROOM_RES.var_name)
}
inline void LEAVE_ROOM_RES::set_var_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LEAVE_ROOM_RES.var_name)
}
inline std::string* LEAVE_ROOM_RES::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LEAVE_ROOM_RES::release_var_name() {
  // @@protoc_insertion_point(field_release:LEAVE_ROOM_RES.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LEAVE_ROOM_RES::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:LEAVE_ROOM_RES.var_name)
}

// optional .ErrorCode var_code = 3;
inline bool LEAVE_ROOM_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LEAVE_ROOM_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void LEAVE_ROOM_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ErrorCode LEAVE_ROOM_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode LEAVE_ROOM_RES::var_code() const {
  // @@protoc_insertion_point(field_get:LEAVE_ROOM_RES.var_code)
  return _internal_var_code();
}
inline void LEAVE_ROOM_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  var_code_ = value;
}
inline void LEAVE_ROOM_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:LEAVE_ROOM_RES.var_code)
}

// optional int64 var_index = 4;
inline bool LEAVE_ROOM_RES::_internal_has_var_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LEAVE_ROOM_RES::has_var_index() const {
  return _internal_has_var_index();
}
inline void LEAVE_ROOM_RES::clear_var_index() {
  var_index_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LEAVE_ROOM_RES::_internal_var_index() const {
  return var_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LEAVE_ROOM_RES::var_index() const {
  // @@protoc_insertion_point(field_get:LEAVE_ROOM_RES.var_index)
  return _internal_var_index();
}
inline void LEAVE_ROOM_RES::_internal_set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  var_index_ = value;
}
inline void LEAVE_ROOM_RES::set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_var_index(value);
  // @@protoc_insertion_point(field_set:LEAVE_ROOM_RES.var_index)
}

// -------------------------------------------------------------------

// BROADCAST_ROOM_MESSAGE_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_BROADCAST_ROOM_MESSAGE_RES];
inline bool BROADCAST_ROOM_MESSAGE_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BROADCAST_ROOM_MESSAGE_RES::has_id() const {
  return _internal_has_id();
}
inline void BROADCAST_ROOM_MESSAGE_RES::clear_id() {
  id_ = 11;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOCOL BROADCAST_ROOM_MESSAGE_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL BROADCAST_ROOM_MESSAGE_RES::id() const {
  // @@protoc_insertion_point(field_get:BROADCAST_ROOM_MESSAGE_RES.id)
  return _internal_id();
}
inline void BROADCAST_ROOM_MESSAGE_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  id_ = value;
}
inline void BROADCAST_ROOM_MESSAGE_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:BROADCAST_ROOM_MESSAGE_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool BROADCAST_ROOM_MESSAGE_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BROADCAST_ROOM_MESSAGE_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void BROADCAST_ROOM_MESSAGE_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ErrorCode BROADCAST_ROOM_MESSAGE_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode BROADCAST_ROOM_MESSAGE_RES::var_code() const {
  // @@protoc_insertion_point(field_get:BROADCAST_ROOM_MESSAGE_RES.var_code)
  return _internal_var_code();
}
inline void BROADCAST_ROOM_MESSAGE_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  var_code_ = value;
}
inline void BROADCAST_ROOM_MESSAGE_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:BROADCAST_ROOM_MESSAGE_RES.var_code)
}

// optional bytes var_message = 3;
inline bool BROADCAST_ROOM_MESSAGE_RES::_internal_has_var_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BROADCAST_ROOM_MESSAGE_RES::has_var_message() const {
  return _internal_has_var_message();
}
inline void BROADCAST_ROOM_MESSAGE_RES::clear_var_message() {
  var_message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BROADCAST_ROOM_MESSAGE_RES::var_message() const {
  // @@protoc_insertion_point(field_get:BROADCAST_ROOM_MESSAGE_RES.var_message)
  return _internal_var_message();
}
inline void BROADCAST_ROOM_MESSAGE_RES::set_var_message(const std::string& value) {
  _internal_set_var_message(value);
  // @@protoc_insertion_point(field_set:BROADCAST_ROOM_MESSAGE_RES.var_message)
}
inline std::string* BROADCAST_ROOM_MESSAGE_RES::mutable_var_message() {
  // @@protoc_insertion_point(field_mutable:BROADCAST_ROOM_MESSAGE_RES.var_message)
  return _internal_mutable_var_message();
}
inline const std::string& BROADCAST_ROOM_MESSAGE_RES::_internal_var_message() const {
  return var_message_.GetNoArena();
}
inline void BROADCAST_ROOM_MESSAGE_RES::_internal_set_var_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BROADCAST_ROOM_MESSAGE_RES::set_var_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BROADCAST_ROOM_MESSAGE_RES.var_message)
}
inline void BROADCAST_ROOM_MESSAGE_RES::set_var_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BROADCAST_ROOM_MESSAGE_RES.var_message)
}
inline void BROADCAST_ROOM_MESSAGE_RES::set_var_message(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BROADCAST_ROOM_MESSAGE_RES.var_message)
}
inline std::string* BROADCAST_ROOM_MESSAGE_RES::_internal_mutable_var_message() {
  _has_bits_[0] |= 0x00000001u;
  return var_message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BROADCAST_ROOM_MESSAGE_RES::release_var_message() {
  // @@protoc_insertion_point(field_release:BROADCAST_ROOM_MESSAGE_RES.var_message)
  if (!_internal_has_var_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BROADCAST_ROOM_MESSAGE_RES::set_allocated_var_message(std::string* var_message) {
  if (var_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_message);
  // @@protoc_insertion_point(field_set_allocated:BROADCAST_ROOM_MESSAGE_RES.var_message)
}

// optional bytes var_name = 4;
inline bool BROADCAST_ROOM_MESSAGE_RES::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BROADCAST_ROOM_MESSAGE_RES::has_var_name() const {
  return _internal_has_var_name();
}
inline void BROADCAST_ROOM_MESSAGE_RES::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BROADCAST_ROOM_MESSAGE_RES::var_name() const {
  // @@protoc_insertion_point(field_get:BROADCAST_ROOM_MESSAGE_RES.var_name)
  return _internal_var_name();
}
inline void BROADCAST_ROOM_MESSAGE_RES::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:BROADCAST_ROOM_MESSAGE_RES.var_name)
}
inline std::string* BROADCAST_ROOM_MESSAGE_RES::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:BROADCAST_ROOM_MESSAGE_RES.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& BROADCAST_ROOM_MESSAGE_RES::_internal_var_name() const {
  return var_name_.GetNoArena();
}
inline void BROADCAST_ROOM_MESSAGE_RES::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BROADCAST_ROOM_MESSAGE_RES::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  var_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:BROADCAST_ROOM_MESSAGE_RES.var_name)
}
inline void BROADCAST_ROOM_MESSAGE_RES::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BROADCAST_ROOM_MESSAGE_RES.var_name)
}
inline void BROADCAST_ROOM_MESSAGE_RES::set_var_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BROADCAST_ROOM_MESSAGE_RES.var_name)
}
inline std::string* BROADCAST_ROOM_MESSAGE_RES::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000002u;
  return var_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BROADCAST_ROOM_MESSAGE_RES::release_var_name() {
  // @@protoc_insertion_point(field_release:BROADCAST_ROOM_MESSAGE_RES.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return var_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BROADCAST_ROOM_MESSAGE_RES::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  var_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:BROADCAST_ROOM_MESSAGE_RES.var_name)
}

// optional int32 var_x = 5;
inline bool BROADCAST_ROOM_MESSAGE_RES::_internal_has_var_x() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BROADCAST_ROOM_MESSAGE_RES::has_var_x() const {
  return _internal_has_var_x();
}
inline void BROADCAST_ROOM_MESSAGE_RES::clear_var_x() {
  var_x_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BROADCAST_ROOM_MESSAGE_RES::_internal_var_x() const {
  return var_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BROADCAST_ROOM_MESSAGE_RES::var_x() const {
  // @@protoc_insertion_point(field_get:BROADCAST_ROOM_MESSAGE_RES.var_x)
  return _internal_var_x();
}
inline void BROADCAST_ROOM_MESSAGE_RES::_internal_set_var_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  var_x_ = value;
}
inline void BROADCAST_ROOM_MESSAGE_RES::set_var_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_x(value);
  // @@protoc_insertion_point(field_set:BROADCAST_ROOM_MESSAGE_RES.var_x)
}

// optional int32 var_y = 6;
inline bool BROADCAST_ROOM_MESSAGE_RES::_internal_has_var_y() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BROADCAST_ROOM_MESSAGE_RES::has_var_y() const {
  return _internal_has_var_y();
}
inline void BROADCAST_ROOM_MESSAGE_RES::clear_var_y() {
  var_y_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BROADCAST_ROOM_MESSAGE_RES::_internal_var_y() const {
  return var_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BROADCAST_ROOM_MESSAGE_RES::var_y() const {
  // @@protoc_insertion_point(field_get:BROADCAST_ROOM_MESSAGE_RES.var_y)
  return _internal_var_y();
}
inline void BROADCAST_ROOM_MESSAGE_RES::_internal_set_var_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  var_y_ = value;
}
inline void BROADCAST_ROOM_MESSAGE_RES::set_var_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_var_y(value);
  // @@protoc_insertion_point(field_set:BROADCAST_ROOM_MESSAGE_RES.var_y)
}

// optional .eTeam var_color = 7;
inline bool BROADCAST_ROOM_MESSAGE_RES::_internal_has_var_color() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BROADCAST_ROOM_MESSAGE_RES::has_var_color() const {
  return _internal_has_var_color();
}
inline void BROADCAST_ROOM_MESSAGE_RES::clear_var_color() {
  var_color_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::eTeam BROADCAST_ROOM_MESSAGE_RES::_internal_var_color() const {
  return static_cast< ::eTeam >(var_color_);
}
inline ::eTeam BROADCAST_ROOM_MESSAGE_RES::var_color() const {
  // @@protoc_insertion_point(field_get:BROADCAST_ROOM_MESSAGE_RES.var_color)
  return _internal_var_color();
}
inline void BROADCAST_ROOM_MESSAGE_RES::_internal_set_var_color(::eTeam value) {
  assert(::eTeam_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  var_color_ = value;
}
inline void BROADCAST_ROOM_MESSAGE_RES::set_var_color(::eTeam value) {
  _internal_set_var_color(value);
  // @@protoc_insertion_point(field_set:BROADCAST_ROOM_MESSAGE_RES.var_color)
}

// -------------------------------------------------------------------

// ROOM_LIST_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_RES];
inline bool ROOM_LIST_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ROOM_LIST_RES::has_id() const {
  return _internal_has_id();
}
inline void ROOM_LIST_RES::clear_id() {
  id_ = 14;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL ROOM_LIST_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL ROOM_LIST_RES::id() const {
  // @@protoc_insertion_point(field_get:ROOM_LIST_RES.id)
  return _internal_id();
}
inline void ROOM_LIST_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void ROOM_LIST_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ROOM_LIST_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool ROOM_LIST_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ROOM_LIST_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void ROOM_LIST_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ErrorCode ROOM_LIST_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode ROOM_LIST_RES::var_code() const {
  // @@protoc_insertion_point(field_get:ROOM_LIST_RES.var_code)
  return _internal_var_code();
}
inline void ROOM_LIST_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  var_code_ = value;
}
inline void ROOM_LIST_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:ROOM_LIST_RES.var_code)
}

// repeated .RoomInfo2 var_room_list = 3;
inline int ROOM_LIST_RES::_internal_var_room_list_size() const {
  return var_room_list_.size();
}
inline int ROOM_LIST_RES::var_room_list_size() const {
  return _internal_var_room_list_size();
}
inline ::RoomInfo2* ROOM_LIST_RES::mutable_var_room_list(int index) {
  // @@protoc_insertion_point(field_mutable:ROOM_LIST_RES.var_room_list)
  return var_room_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomInfo2 >*
ROOM_LIST_RES::mutable_var_room_list() {
  // @@protoc_insertion_point(field_mutable_list:ROOM_LIST_RES.var_room_list)
  return &var_room_list_;
}
inline const ::RoomInfo2& ROOM_LIST_RES::_internal_var_room_list(int index) const {
  return var_room_list_.Get(index);
}
inline const ::RoomInfo2& ROOM_LIST_RES::var_room_list(int index) const {
  // @@protoc_insertion_point(field_get:ROOM_LIST_RES.var_room_list)
  return _internal_var_room_list(index);
}
inline ::RoomInfo2* ROOM_LIST_RES::_internal_add_var_room_list() {
  return var_room_list_.Add();
}
inline ::RoomInfo2* ROOM_LIST_RES::add_var_room_list() {
  // @@protoc_insertion_point(field_add:ROOM_LIST_RES.var_room_list)
  return _internal_add_var_room_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RoomInfo2 >&
ROOM_LIST_RES::var_room_list() const {
  // @@protoc_insertion_point(field_list:ROOM_LIST_RES.var_room_list)
  return var_room_list_;
}

// -------------------------------------------------------------------

// MATCH_RES

// optional .PROTOCOL id = 1 [default = ID_PKT_MATCH_RES];
inline bool MATCH_RES::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MATCH_RES::has_id() const {
  return _internal_has_id();
}
inline void MATCH_RES::clear_id() {
  id_ = 16;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOCOL MATCH_RES::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL MATCH_RES::id() const {
  // @@protoc_insertion_point(field_get:MATCH_RES.id)
  return _internal_id();
}
inline void MATCH_RES::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void MATCH_RES::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MATCH_RES.id)
}

// optional .ErrorCode var_code = 2;
inline bool MATCH_RES::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MATCH_RES::has_var_code() const {
  return _internal_has_var_code();
}
inline void MATCH_RES::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::ErrorCode MATCH_RES::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode MATCH_RES::var_code() const {
  // @@protoc_insertion_point(field_get:MATCH_RES.var_code)
  return _internal_var_code();
}
inline void MATCH_RES::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  var_code_ = value;
}
inline void MATCH_RES::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:MATCH_RES.var_code)
}

// -------------------------------------------------------------------

// GAME_RESULT_NTY

// optional .PROTOCOL id = 1 [default = ID_PKT_GAME_RESULT_NTY];
inline bool GAME_RESULT_NTY::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GAME_RESULT_NTY::has_id() const {
  return _internal_has_id();
}
inline void GAME_RESULT_NTY::clear_id() {
  id_ = 18;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOCOL GAME_RESULT_NTY::_internal_id() const {
  return static_cast< ::PROTOCOL >(id_);
}
inline ::PROTOCOL GAME_RESULT_NTY::id() const {
  // @@protoc_insertion_point(field_get:GAME_RESULT_NTY.id)
  return _internal_id();
}
inline void GAME_RESULT_NTY::_internal_set_id(::PROTOCOL value) {
  assert(::PROTOCOL_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  id_ = value;
}
inline void GAME_RESULT_NTY::set_id(::PROTOCOL value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:GAME_RESULT_NTY.id)
}

// optional int64 var_index = 2;
inline bool GAME_RESULT_NTY::_internal_has_var_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GAME_RESULT_NTY::has_var_index() const {
  return _internal_has_var_index();
}
inline void GAME_RESULT_NTY::clear_var_index() {
  var_index_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GAME_RESULT_NTY::_internal_var_index() const {
  return var_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GAME_RESULT_NTY::var_index() const {
  // @@protoc_insertion_point(field_get:GAME_RESULT_NTY.var_index)
  return _internal_var_index();
}
inline void GAME_RESULT_NTY::_internal_set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  var_index_ = value;
}
inline void GAME_RESULT_NTY::set_var_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_var_index(value);
  // @@protoc_insertion_point(field_set:GAME_RESULT_NTY.var_index)
}

// optional bytes var_name = 3;
inline bool GAME_RESULT_NTY::_internal_has_var_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GAME_RESULT_NTY::has_var_name() const {
  return _internal_has_var_name();
}
inline void GAME_RESULT_NTY::clear_var_name() {
  var_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GAME_RESULT_NTY::var_name() const {
  // @@protoc_insertion_point(field_get:GAME_RESULT_NTY.var_name)
  return _internal_var_name();
}
inline void GAME_RESULT_NTY::set_var_name(const std::string& value) {
  _internal_set_var_name(value);
  // @@protoc_insertion_point(field_set:GAME_RESULT_NTY.var_name)
}
inline std::string* GAME_RESULT_NTY::mutable_var_name() {
  // @@protoc_insertion_point(field_mutable:GAME_RESULT_NTY.var_name)
  return _internal_mutable_var_name();
}
inline const std::string& GAME_RESULT_NTY::_internal_var_name() const {
  return var_name_.GetNoArena();
}
inline void GAME_RESULT_NTY::_internal_set_var_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GAME_RESULT_NTY::set_var_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GAME_RESULT_NTY.var_name)
}
inline void GAME_RESULT_NTY::set_var_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GAME_RESULT_NTY.var_name)
}
inline void GAME_RESULT_NTY::set_var_name(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  var_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GAME_RESULT_NTY.var_name)
}
inline std::string* GAME_RESULT_NTY::_internal_mutable_var_name() {
  _has_bits_[0] |= 0x00000001u;
  return var_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GAME_RESULT_NTY::release_var_name() {
  // @@protoc_insertion_point(field_release:GAME_RESULT_NTY.var_name)
  if (!_internal_has_var_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return var_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GAME_RESULT_NTY::set_allocated_var_name(std::string* var_name) {
  if (var_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  var_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), var_name);
  // @@protoc_insertion_point(field_set_allocated:GAME_RESULT_NTY.var_name)
}

// optional .ErrorCode var_code = 4;
inline bool GAME_RESULT_NTY::_internal_has_var_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GAME_RESULT_NTY::has_var_code() const {
  return _internal_has_var_code();
}
inline void GAME_RESULT_NTY::clear_var_code() {
  var_code_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::ErrorCode GAME_RESULT_NTY::_internal_var_code() const {
  return static_cast< ::ErrorCode >(var_code_);
}
inline ::ErrorCode GAME_RESULT_NTY::var_code() const {
  // @@protoc_insertion_point(field_get:GAME_RESULT_NTY.var_code)
  return _internal_var_code();
}
inline void GAME_RESULT_NTY::_internal_set_var_code(::ErrorCode value) {
  assert(::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  var_code_ = value;
}
inline void GAME_RESULT_NTY::set_var_code(::ErrorCode value) {
  _internal_set_var_code(value);
  // @@protoc_insertion_point(field_set:GAME_RESULT_NTY.var_code)
}

// optional .eTeam var_color = 5;
inline bool GAME_RESULT_NTY::_internal_has_var_color() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GAME_RESULT_NTY::has_var_color() const {
  return _internal_has_var_color();
}
inline void GAME_RESULT_NTY::clear_var_color() {
  var_color_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::eTeam GAME_RESULT_NTY::_internal_var_color() const {
  return static_cast< ::eTeam >(var_color_);
}
inline ::eTeam GAME_RESULT_NTY::var_color() const {
  // @@protoc_insertion_point(field_get:GAME_RESULT_NTY.var_color)
  return _internal_var_color();
}
inline void GAME_RESULT_NTY::_internal_set_var_color(::eTeam value) {
  assert(::eTeam_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  var_color_ = value;
}
inline void GAME_RESULT_NTY::set_var_color(::eTeam value) {
  _internal_set_var_color(value);
  // @@protoc_insertion_point(field_set:GAME_RESULT_NTY.var_color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GS_2eCLI_2eproto
