// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GS.CLI.proto

#include "GS.CLI.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rank_Structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomInfo2_Structure_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Structure_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoomUserInfo_Structure_2eproto;
class VERSION_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VERSION_RES> _instance;
} _VERSION_RES_default_instance_;
class LOGIN_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LOGIN_RES> _instance;
} _LOGIN_RES_default_instance_;
class CREATE_ROOM_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CREATE_ROOM_RES> _instance;
} _CREATE_ROOM_RES_default_instance_;
class ENTER_ROOM_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ENTER_ROOM_RES> _instance;
} _ENTER_ROOM_RES_default_instance_;
class NEW_USER_IN_ROOM_NTYDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NEW_USER_IN_ROOM_NTY> _instance;
} _NEW_USER_IN_ROOM_NTY_default_instance_;
class LEAVE_ROOM_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LEAVE_ROOM_RES> _instance;
} _LEAVE_ROOM_RES_default_instance_;
class BROADCAST_ROOM_MESSAGE_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BROADCAST_ROOM_MESSAGE_RES> _instance;
} _BROADCAST_ROOM_MESSAGE_RES_default_instance_;
class ROOM_LIST_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ROOM_LIST_RES> _instance;
} _ROOM_LIST_RES_default_instance_;
class MATCH_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MATCH_RES> _instance;
} _MATCH_RES_default_instance_;
class GAME_RESULT_NTYDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GAME_RESULT_NTY> _instance;
} _GAME_RESULT_NTY_default_instance_;
class RANK_RESDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RANK_RES> _instance;
} _RANK_RES_default_instance_;
static void InitDefaultsscc_info_BROADCAST_ROOM_MESSAGE_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_BROADCAST_ROOM_MESSAGE_RES_default_instance_;
    new (ptr) ::BROADCAST_ROOM_MESSAGE_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::BROADCAST_ROOM_MESSAGE_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BROADCAST_ROOM_MESSAGE_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BROADCAST_ROOM_MESSAGE_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_CREATE_ROOM_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CREATE_ROOM_RES_default_instance_;
    new (ptr) ::CREATE_ROOM_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CREATE_ROOM_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CREATE_ROOM_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CREATE_ROOM_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_ENTER_ROOM_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ENTER_ROOM_RES_default_instance_;
    new (ptr) ::ENTER_ROOM_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ENTER_ROOM_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ENTER_ROOM_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ENTER_ROOM_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_GAME_RESULT_NTY_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GAME_RESULT_NTY_default_instance_;
    new (ptr) ::GAME_RESULT_NTY();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GAME_RESULT_NTY::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GAME_RESULT_NTY_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GAME_RESULT_NTY_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_LEAVE_ROOM_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LEAVE_ROOM_RES_default_instance_;
    new (ptr) ::LEAVE_ROOM_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LEAVE_ROOM_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LEAVE_ROOM_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LEAVE_ROOM_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_LOGIN_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LOGIN_RES_default_instance_;
    new (ptr) ::LOGIN_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LOGIN_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LOGIN_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LOGIN_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_MATCH_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MATCH_RES_default_instance_;
    new (ptr) ::MATCH_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MATCH_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MATCH_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MATCH_RES_GS_2eCLI_2eproto}, {}};

static void InitDefaultsscc_info_NEW_USER_IN_ROOM_NTY_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NEW_USER_IN_ROOM_NTY_default_instance_;
    new (ptr) ::NEW_USER_IN_ROOM_NTY();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NEW_USER_IN_ROOM_NTY::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NEW_USER_IN_ROOM_NTY_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NEW_USER_IN_ROOM_NTY_GS_2eCLI_2eproto}, {
      &scc_info_RoomUserInfo_Structure_2eproto.base,}};

static void InitDefaultsscc_info_RANK_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RANK_RES_default_instance_;
    new (ptr) ::RANK_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RANK_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RANK_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RANK_RES_GS_2eCLI_2eproto}, {
      &scc_info_Rank_Structure_2eproto.base,}};

static void InitDefaultsscc_info_ROOM_LIST_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ROOM_LIST_RES_default_instance_;
    new (ptr) ::ROOM_LIST_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ROOM_LIST_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ROOM_LIST_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ROOM_LIST_RES_GS_2eCLI_2eproto}, {
      &scc_info_RoomInfo2_Structure_2eproto.base,}};

static void InitDefaultsscc_info_VERSION_RES_GS_2eCLI_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_VERSION_RES_default_instance_;
    new (ptr) ::VERSION_RES();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::VERSION_RES::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VERSION_RES_GS_2eCLI_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VERSION_RES_GS_2eCLI_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_GS_2eCLI_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_GS_2eCLI_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_GS_2eCLI_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_GS_2eCLI_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::VERSION_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::VERSION_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::VERSION_RES, id_),
  PROTOBUF_FIELD_OFFSET(::VERSION_RES, var_version_),
  PROTOBUF_FIELD_OFFSET(::VERSION_RES, var_code_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, id_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, var_index_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, var_win_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, var_lose_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, var_draw_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, var_score_),
  PROTOBUF_FIELD_OFFSET(::LOGIN_RES, var_rank_),
  7,
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_RES, id_),
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_RES, var_name_),
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_RES, var_room_id_),
  PROTOBUF_FIELD_OFFSET(::CREATE_ROOM_RES, var_code_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_RES, id_),
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_RES, var_name_),
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_RES, var_room_id_),
  PROTOBUF_FIELD_OFFSET(::ENTER_ROOM_RES, var_code_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::NEW_USER_IN_ROOM_NTY, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::NEW_USER_IN_ROOM_NTY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NEW_USER_IN_ROOM_NTY, id_),
  PROTOBUF_FIELD_OFFSET(::NEW_USER_IN_ROOM_NTY, var_room_user_),
  PROTOBUF_FIELD_OFFSET(::NEW_USER_IN_ROOM_NTY, var_code_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_RES, id_),
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_RES, var_name_),
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::LEAVE_ROOM_RES, var_index_),
  3,
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::BROADCAST_ROOM_MESSAGE_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::BROADCAST_ROOM_MESSAGE_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::BROADCAST_ROOM_MESSAGE_RES, id_),
  PROTOBUF_FIELD_OFFSET(::BROADCAST_ROOM_MESSAGE_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::BROADCAST_ROOM_MESSAGE_RES, var_message_),
  PROTOBUF_FIELD_OFFSET(::BROADCAST_ROOM_MESSAGE_RES, var_name_),
  PROTOBUF_FIELD_OFFSET(::BROADCAST_ROOM_MESSAGE_RES, var_x_),
  PROTOBUF_FIELD_OFFSET(::BROADCAST_ROOM_MESSAGE_RES, var_y_),
  PROTOBUF_FIELD_OFFSET(::BROADCAST_ROOM_MESSAGE_RES, var_color_),
  6,
  2,
  0,
  1,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_RES, id_),
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_RES, var_code_),
  PROTOBUF_FIELD_OFFSET(::ROOM_LIST_RES, var_room_list_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::MATCH_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::MATCH_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MATCH_RES, id_),
  PROTOBUF_FIELD_OFFSET(::MATCH_RES, var_code_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::GAME_RESULT_NTY, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::GAME_RESULT_NTY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GAME_RESULT_NTY, id_),
  PROTOBUF_FIELD_OFFSET(::GAME_RESULT_NTY, var_index_),
  PROTOBUF_FIELD_OFFSET(::GAME_RESULT_NTY, var_name_),
  PROTOBUF_FIELD_OFFSET(::GAME_RESULT_NTY, var_code_),
  PROTOBUF_FIELD_OFFSET(::GAME_RESULT_NTY, var_color_),
  4,
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::RANK_RES, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::RANK_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RANK_RES, id_),
  PROTOBUF_FIELD_OFFSET(::RANK_RES, var_rank_list_),
  PROTOBUF_FIELD_OFFSET(::RANK_RES, var_code_),
  1,
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::VERSION_RES)},
  { 11, 24, sizeof(::LOGIN_RES)},
  { 32, 41, sizeof(::CREATE_ROOM_RES)},
  { 45, 54, sizeof(::ENTER_ROOM_RES)},
  { 58, 66, sizeof(::NEW_USER_IN_ROOM_NTY)},
  { 69, 78, sizeof(::LEAVE_ROOM_RES)},
  { 82, 94, sizeof(::BROADCAST_ROOM_MESSAGE_RES)},
  { 101, 109, sizeof(::ROOM_LIST_RES)},
  { 112, 119, sizeof(::MATCH_RES)},
  { 121, 131, sizeof(::GAME_RESULT_NTY)},
  { 136, 144, sizeof(::RANK_RES)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_VERSION_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LOGIN_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CREATE_ROOM_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ENTER_ROOM_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NEW_USER_IN_ROOM_NTY_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LEAVE_ROOM_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_BROADCAST_ROOM_MESSAGE_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ROOM_LIST_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MATCH_RES_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GAME_RESULT_NTY_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RANK_RES_default_instance_),
};

const char descriptor_table_protodef_GS_2eCLI_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014GS.CLI.proto\032\nEnum.proto\032\017Structure.pr"
  "oto\"k\n\013VERSION_RES\022)\n\002id\030\001 \001(\0162\t.PROTOCO"
  "L:\022ID_PKT_VERSION_RES\022\023\n\013var_version\030\002 \001"
  "(\002\022\034\n\010var_code\030\003 \001(\0162\n.ErrorCode\"\277\001\n\tLOG"
  "IN_RES\022\'\n\002id\030\001 \001(\0162\t.PROTOCOL:\020ID_PKT_LO"
  "GIN_RES\022\034\n\010var_code\030\002 \001(\0162\n.ErrorCode\022\021\n"
  "\tvar_index\030\003 \001(\003\022\017\n\007var_win\030\004 \001(\005\022\020\n\010var"
  "_lose\030\005 \001(\005\022\020\n\010var_draw\030\006 \001(\005\022\021\n\tvar_sco"
  "re\030\007 \001(\005\022\020\n\010var_rank\030\010 \001(\005\"\205\001\n\017CREATE_RO"
  "OM_RES\022-\n\002id\030\001 \001(\0162\t.PROTOCOL:\026ID_PKT_CR"
  "EATE_ROOM_RES\022\020\n\010var_name\030\002 \001(\014\022\023\n\013var_r"
  "oom_id\030\003 \001(\005\022\034\n\010var_code\030\004 \001(\0162\n.ErrorCo"
  "de\"\203\001\n\016ENTER_ROOM_RES\022,\n\002id\030\001 \001(\0162\t.PROT"
  "OCOL:\025ID_PKT_ENTER_ROOM_RES\022\020\n\010var_name\030"
  "\002 \001(\014\022\023\n\013var_room_id\030\003 \001(\005\022\034\n\010var_code\030\004"
  " \001(\0162\n.ErrorCode\"\216\001\n\024NEW_USER_IN_ROOM_NT"
  "Y\0222\n\002id\030\001 \001(\0162\t.PROTOCOL:\033ID_PKT_NEW_USE"
  "R_IN_ROOM_NTY\022$\n\rvar_room_user\030\002 \001(\0132\r.R"
  "oomUserInfo\022\034\n\010var_code\030\003 \001(\0162\n.ErrorCod"
  "e\"\201\001\n\016LEAVE_ROOM_RES\022,\n\002id\030\001 \001(\0162\t.PROTO"
  "COL:\025ID_PKT_LEAVE_ROOM_RES\022\020\n\010var_name\030\002"
  " \001(\014\022\034\n\010var_code\030\003 \001(\0162\n.ErrorCode\022\021\n\tva"
  "r_index\030\004 \001(\003\"\324\001\n\032BROADCAST_ROOM_MESSAGE"
  "_RES\0228\n\002id\030\001 \001(\0162\t.PROTOCOL:!ID_PKT_BROA"
  "DCAST_ROOM_MESSAGE_RES\022\034\n\010var_code\030\002 \001(\016"
  "2\n.ErrorCode\022\023\n\013var_message\030\003 \001(\014\022\020\n\010var"
  "_name\030\004 \001(\014\022\r\n\005var_x\030\005 \001(\005\022\r\n\005var_y\030\006 \001("
  "\005\022\031\n\tvar_color\030\007 \001(\0162\006.eTeam\"}\n\rROOM_LIS"
  "T_RES\022+\n\002id\030\001 \001(\0162\t.PROTOCOL:\024ID_PKT_ROO"
  "M_LIST_RES\022\034\n\010var_code\030\002 \001(\0162\n.ErrorCode"
  "\022!\n\rvar_room_list\030\003 \003(\0132\n.RoomInfo2\"R\n\tM"
  "ATCH_RES\022\'\n\002id\030\001 \001(\0162\t.PROTOCOL:\020ID_PKT_"
  "MATCH_RES\022\034\n\010var_code\030\002 \001(\0162\n.ErrorCode\""
  "\236\001\n\017GAME_RESULT_NTY\022-\n\002id\030\001 \001(\0162\t.PROTOC"
  "OL:\026ID_PKT_GAME_RESULT_NTY\022\021\n\tvar_index\030"
  "\002 \001(\003\022\020\n\010var_name\030\003 \001(\014\022\034\n\010var_code\030\004 \001("
  "\0162\n.ErrorCode\022\031\n\tvar_color\030\005 \001(\0162\006.eTeam"
  "\"n\n\010RANK_RES\022&\n\002id\030\001 \001(\0162\t.PROTOCOL:\017ID_"
  "PKT_RANK_RES\022\034\n\rvar_rank_list\030\002 \003(\0132\005.Ra"
  "nk\022\034\n\010var_code\030\003 \001(\0162\n.ErrorCodeB\002H\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_GS_2eCLI_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Structure_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_GS_2eCLI_2eproto_sccs[11] = {
  &scc_info_BROADCAST_ROOM_MESSAGE_RES_GS_2eCLI_2eproto.base,
  &scc_info_CREATE_ROOM_RES_GS_2eCLI_2eproto.base,
  &scc_info_ENTER_ROOM_RES_GS_2eCLI_2eproto.base,
  &scc_info_GAME_RESULT_NTY_GS_2eCLI_2eproto.base,
  &scc_info_LEAVE_ROOM_RES_GS_2eCLI_2eproto.base,
  &scc_info_LOGIN_RES_GS_2eCLI_2eproto.base,
  &scc_info_MATCH_RES_GS_2eCLI_2eproto.base,
  &scc_info_NEW_USER_IN_ROOM_NTY_GS_2eCLI_2eproto.base,
  &scc_info_RANK_RES_GS_2eCLI_2eproto.base,
  &scc_info_ROOM_LIST_RES_GS_2eCLI_2eproto.base,
  &scc_info_VERSION_RES_GS_2eCLI_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_GS_2eCLI_2eproto_once;
static bool descriptor_table_GS_2eCLI_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GS_2eCLI_2eproto = {
  &descriptor_table_GS_2eCLI_2eproto_initialized, descriptor_table_protodef_GS_2eCLI_2eproto, "GS.CLI.proto", 1596,
  &descriptor_table_GS_2eCLI_2eproto_once, descriptor_table_GS_2eCLI_2eproto_sccs, descriptor_table_GS_2eCLI_2eproto_deps, 11, 2,
  schemas, file_default_instances, TableStruct_GS_2eCLI_2eproto::offsets,
  file_level_metadata_GS_2eCLI_2eproto, 11, file_level_enum_descriptors_GS_2eCLI_2eproto, file_level_service_descriptors_GS_2eCLI_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GS_2eCLI_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_GS_2eCLI_2eproto), true);

// ===================================================================

void VERSION_RES::InitAsDefaultInstance() {
}
class VERSION_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<VERSION_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VERSION_RES::VERSION_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:VERSION_RES)
}
VERSION_RES::VERSION_RES(const VERSION_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_version_, &from.var_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_version_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:VERSION_RES)
}

void VERSION_RES::SharedCtor() {
  ::memset(&var_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_code_) -
      reinterpret_cast<char*>(&var_version_)) + sizeof(var_code_));
  id_ = 1;
}

VERSION_RES::~VERSION_RES() {
  // @@protoc_insertion_point(destructor:VERSION_RES)
  SharedDtor();
}

void VERSION_RES::SharedDtor() {
}

void VERSION_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VERSION_RES& VERSION_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VERSION_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void VERSION_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:VERSION_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&var_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_code_) -
        reinterpret_cast<char*>(&var_version_)) + sizeof(var_code_));
    id_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VERSION_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float var_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_var_version(&has_bits);
          var_version_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VERSION_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:VERSION_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_RES];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional float var_version = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_var_version(), target);
  }

  // optional .ErrorCode var_code = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_var_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VERSION_RES)
  return target;
}

size_t VERSION_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:VERSION_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional float var_version = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional .ErrorCode var_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_VERSION_RES];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VERSION_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:VERSION_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const VERSION_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VERSION_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:VERSION_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:VERSION_RES)
    MergeFrom(*source);
  }
}

void VERSION_RES::MergeFrom(const VERSION_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:VERSION_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      var_version_ = from.var_version_;
    }
    if (cached_has_bits & 0x00000002u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VERSION_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:VERSION_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VERSION_RES::CopyFrom(const VERSION_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VERSION_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VERSION_RES::IsInitialized() const {
  return true;
}

void VERSION_RES::InternalSwap(VERSION_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_version_, other->var_version_);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VERSION_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LOGIN_RES::InitAsDefaultInstance() {
}
class LOGIN_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<LOGIN_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_win(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_lose(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_var_score(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_var_rank(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

LOGIN_RES::LOGIN_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LOGIN_RES)
}
LOGIN_RES::LOGIN_RES(const LOGIN_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_index_, &from.var_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_index_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:LOGIN_RES)
}

void LOGIN_RES::SharedCtor() {
  ::memset(&var_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_rank_) -
      reinterpret_cast<char*>(&var_index_)) + sizeof(var_rank_));
  id_ = 3;
}

LOGIN_RES::~LOGIN_RES() {
  // @@protoc_insertion_point(destructor:LOGIN_RES)
  SharedDtor();
}

void LOGIN_RES::SharedDtor() {
}

void LOGIN_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LOGIN_RES& LOGIN_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LOGIN_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void LOGIN_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:LOGIN_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&var_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_rank_) -
        reinterpret_cast<char*>(&var_index_)) + sizeof(var_rank_));
    id_ = 3;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LOGIN_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 var_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_var_index(&has_bits);
          var_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_win = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_var_win(&has_bits);
          var_win_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_lose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_var_lose(&has_bits);
          var_lose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_draw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_var_draw(&has_bits);
          var_draw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_score = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_var_score(&has_bits);
          var_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_rank = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_var_rank(&has_bits);
          var_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LOGIN_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LOGIN_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_RES];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  // optional int64 var_index = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_var_index(), target);
  }

  // optional int32 var_win = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_var_win(), target);
  }

  // optional int32 var_lose = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_var_lose(), target);
  }

  // optional int32 var_draw = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_var_draw(), target);
  }

  // optional int32 var_score = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_var_score(), target);
  }

  // optional int32 var_rank = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_var_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LOGIN_RES)
  return target;
}

size_t LOGIN_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LOGIN_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int64 var_index = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_var_index());
    }

    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional int32 var_win = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_win());
    }

    // optional int32 var_lose = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_lose());
    }

    // optional int32 var_draw = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_draw());
    }

    // optional int32 var_score = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_score());
    }

    // optional int32 var_rank = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_rank());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_LOGIN_RES];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LOGIN_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LOGIN_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const LOGIN_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LOGIN_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LOGIN_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LOGIN_RES)
    MergeFrom(*source);
  }
}

void LOGIN_RES::MergeFrom(const LOGIN_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LOGIN_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      var_index_ = from.var_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_win_ = from.var_win_;
    }
    if (cached_has_bits & 0x00000008u) {
      var_lose_ = from.var_lose_;
    }
    if (cached_has_bits & 0x00000010u) {
      var_draw_ = from.var_draw_;
    }
    if (cached_has_bits & 0x00000020u) {
      var_score_ = from.var_score_;
    }
    if (cached_has_bits & 0x00000040u) {
      var_rank_ = from.var_rank_;
    }
    if (cached_has_bits & 0x00000080u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LOGIN_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LOGIN_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LOGIN_RES::CopyFrom(const LOGIN_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LOGIN_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LOGIN_RES::IsInitialized() const {
  return true;
}

void LOGIN_RES::InternalSwap(LOGIN_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_index_, other->var_index_);
  swap(var_code_, other->var_code_);
  swap(var_win_, other->var_win_);
  swap(var_lose_, other->var_lose_);
  swap(var_draw_, other->var_draw_);
  swap(var_score_, other->var_score_);
  swap(var_rank_, other->var_rank_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LOGIN_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CREATE_ROOM_RES::InitAsDefaultInstance() {
}
class CREATE_ROOM_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<CREATE_ROOM_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CREATE_ROOM_RES::CREATE_ROOM_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CREATE_ROOM_RES)
}
CREATE_ROOM_RES::CREATE_ROOM_RES(const CREATE_ROOM_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_name()) {
    var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  ::memcpy(&var_room_id_, &from.var_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_room_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:CREATE_ROOM_RES)
}

void CREATE_ROOM_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CREATE_ROOM_RES_GS_2eCLI_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&var_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_code_) -
      reinterpret_cast<char*>(&var_room_id_)) + sizeof(var_code_));
  id_ = 5;
}

CREATE_ROOM_RES::~CREATE_ROOM_RES() {
  // @@protoc_insertion_point(destructor:CREATE_ROOM_RES)
  SharedDtor();
}

void CREATE_ROOM_RES::SharedDtor() {
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CREATE_ROOM_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CREATE_ROOM_RES& CREATE_ROOM_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CREATE_ROOM_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void CREATE_ROOM_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:CREATE_ROOM_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    var_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&var_room_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_code_) -
        reinterpret_cast<char*>(&var_room_id_)) + sizeof(var_code_));
    id_ = 5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CREATE_ROOM_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes var_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_room_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_var_room_id(&has_bits);
          var_room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CREATE_ROOM_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CREATE_ROOM_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_RES];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional bytes var_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_var_name(), target);
  }

  // optional int32 var_room_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_room_id(), target);
  }

  // optional .ErrorCode var_code = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_var_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CREATE_ROOM_RES)
  return target;
}

size_t CREATE_ROOM_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CREATE_ROOM_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes var_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_var_name());
    }

    // optional int32 var_room_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_room_id());
    }

    // optional .ErrorCode var_code = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_CREATE_ROOM_RES];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CREATE_ROOM_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CREATE_ROOM_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const CREATE_ROOM_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CREATE_ROOM_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CREATE_ROOM_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CREATE_ROOM_RES)
    MergeFrom(*source);
  }
}

void CREATE_ROOM_RES::MergeFrom(const CREATE_ROOM_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CREATE_ROOM_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      var_room_id_ = from.var_room_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CREATE_ROOM_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CREATE_ROOM_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CREATE_ROOM_RES::CopyFrom(const CREATE_ROOM_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CREATE_ROOM_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CREATE_ROOM_RES::IsInitialized() const {
  return true;
}

void CREATE_ROOM_RES::InternalSwap(CREATE_ROOM_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_room_id_, other->var_room_id_);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CREATE_ROOM_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ENTER_ROOM_RES::InitAsDefaultInstance() {
}
class ENTER_ROOM_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<ENTER_ROOM_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_room_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ENTER_ROOM_RES::ENTER_ROOM_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ENTER_ROOM_RES)
}
ENTER_ROOM_RES::ENTER_ROOM_RES(const ENTER_ROOM_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_name()) {
    var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  ::memcpy(&var_room_id_, &from.var_room_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_room_id_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:ENTER_ROOM_RES)
}

void ENTER_ROOM_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ENTER_ROOM_RES_GS_2eCLI_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&var_room_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_code_) -
      reinterpret_cast<char*>(&var_room_id_)) + sizeof(var_code_));
  id_ = 7;
}

ENTER_ROOM_RES::~ENTER_ROOM_RES() {
  // @@protoc_insertion_point(destructor:ENTER_ROOM_RES)
  SharedDtor();
}

void ENTER_ROOM_RES::SharedDtor() {
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ENTER_ROOM_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ENTER_ROOM_RES& ENTER_ROOM_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ENTER_ROOM_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void ENTER_ROOM_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:ENTER_ROOM_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    var_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&var_room_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_code_) -
        reinterpret_cast<char*>(&var_room_id_)) + sizeof(var_code_));
    id_ = 7;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ENTER_ROOM_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes var_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_room_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_var_room_id(&has_bits);
          var_room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ENTER_ROOM_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ENTER_ROOM_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_RES];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional bytes var_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_var_name(), target);
  }

  // optional int32 var_room_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_var_room_id(), target);
  }

  // optional .ErrorCode var_code = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_var_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ENTER_ROOM_RES)
  return target;
}

size_t ENTER_ROOM_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ENTER_ROOM_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes var_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_var_name());
    }

    // optional int32 var_room_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_room_id());
    }

    // optional .ErrorCode var_code = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_ENTER_ROOM_RES];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ENTER_ROOM_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ENTER_ROOM_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const ENTER_ROOM_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ENTER_ROOM_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ENTER_ROOM_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ENTER_ROOM_RES)
    MergeFrom(*source);
  }
}

void ENTER_ROOM_RES::MergeFrom(const ENTER_ROOM_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ENTER_ROOM_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      var_room_id_ = from.var_room_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ENTER_ROOM_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ENTER_ROOM_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ENTER_ROOM_RES::CopyFrom(const ENTER_ROOM_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ENTER_ROOM_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ENTER_ROOM_RES::IsInitialized() const {
  return true;
}

void ENTER_ROOM_RES::InternalSwap(ENTER_ROOM_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_room_id_, other->var_room_id_);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ENTER_ROOM_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NEW_USER_IN_ROOM_NTY::InitAsDefaultInstance() {
  ::_NEW_USER_IN_ROOM_NTY_default_instance_._instance.get_mutable()->var_room_user_ = const_cast< ::RoomUserInfo*>(
      ::RoomUserInfo::internal_default_instance());
}
class NEW_USER_IN_ROOM_NTY::_Internal {
 public:
  using HasBits = decltype(std::declval<NEW_USER_IN_ROOM_NTY>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::RoomUserInfo& var_room_user(const NEW_USER_IN_ROOM_NTY* msg);
  static void set_has_var_room_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::RoomUserInfo&
NEW_USER_IN_ROOM_NTY::_Internal::var_room_user(const NEW_USER_IN_ROOM_NTY* msg) {
  return *msg->var_room_user_;
}
void NEW_USER_IN_ROOM_NTY::clear_var_room_user() {
  if (var_room_user_ != nullptr) var_room_user_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
NEW_USER_IN_ROOM_NTY::NEW_USER_IN_ROOM_NTY()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NEW_USER_IN_ROOM_NTY)
}
NEW_USER_IN_ROOM_NTY::NEW_USER_IN_ROOM_NTY(const NEW_USER_IN_ROOM_NTY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_var_room_user()) {
    var_room_user_ = new ::RoomUserInfo(*from.var_room_user_);
  } else {
    var_room_user_ = nullptr;
  }
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:NEW_USER_IN_ROOM_NTY)
}

void NEW_USER_IN_ROOM_NTY::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NEW_USER_IN_ROOM_NTY_GS_2eCLI_2eproto.base);
  ::memset(&var_room_user_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_code_) -
      reinterpret_cast<char*>(&var_room_user_)) + sizeof(var_code_));
  id_ = 12;
}

NEW_USER_IN_ROOM_NTY::~NEW_USER_IN_ROOM_NTY() {
  // @@protoc_insertion_point(destructor:NEW_USER_IN_ROOM_NTY)
  SharedDtor();
}

void NEW_USER_IN_ROOM_NTY::SharedDtor() {
  if (this != internal_default_instance()) delete var_room_user_;
}

void NEW_USER_IN_ROOM_NTY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NEW_USER_IN_ROOM_NTY& NEW_USER_IN_ROOM_NTY::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NEW_USER_IN_ROOM_NTY_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void NEW_USER_IN_ROOM_NTY::Clear() {
// @@protoc_insertion_point(message_clear_start:NEW_USER_IN_ROOM_NTY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(var_room_user_ != nullptr);
    var_room_user_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    var_code_ = 0;
    id_ = 12;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* NEW_USER_IN_ROOM_NTY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_NEW_USER_IN_ROOM_NTY];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .RoomUserInfo var_room_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_var_room_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NEW_USER_IN_ROOM_NTY::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NEW_USER_IN_ROOM_NTY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_NEW_USER_IN_ROOM_NTY];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .RoomUserInfo var_room_user = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::var_room_user(this), target, stream);
  }

  // optional .ErrorCode var_code = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_var_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NEW_USER_IN_ROOM_NTY)
  return target;
}

size_t NEW_USER_IN_ROOM_NTY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NEW_USER_IN_ROOM_NTY)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .RoomUserInfo var_room_user = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *var_room_user_);
    }

    // optional .ErrorCode var_code = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_NEW_USER_IN_ROOM_NTY];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NEW_USER_IN_ROOM_NTY::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NEW_USER_IN_ROOM_NTY)
  GOOGLE_DCHECK_NE(&from, this);
  const NEW_USER_IN_ROOM_NTY* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NEW_USER_IN_ROOM_NTY>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NEW_USER_IN_ROOM_NTY)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NEW_USER_IN_ROOM_NTY)
    MergeFrom(*source);
  }
}

void NEW_USER_IN_ROOM_NTY::MergeFrom(const NEW_USER_IN_ROOM_NTY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NEW_USER_IN_ROOM_NTY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_var_room_user()->::RoomUserInfo::MergeFrom(from._internal_var_room_user());
    }
    if (cached_has_bits & 0x00000002u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NEW_USER_IN_ROOM_NTY::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NEW_USER_IN_ROOM_NTY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NEW_USER_IN_ROOM_NTY::CopyFrom(const NEW_USER_IN_ROOM_NTY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NEW_USER_IN_ROOM_NTY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NEW_USER_IN_ROOM_NTY::IsInitialized() const {
  return true;
}

void NEW_USER_IN_ROOM_NTY::InternalSwap(NEW_USER_IN_ROOM_NTY* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_room_user_, other->var_room_user_);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NEW_USER_IN_ROOM_NTY::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LEAVE_ROOM_RES::InitAsDefaultInstance() {
}
class LEAVE_ROOM_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<LEAVE_ROOM_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LEAVE_ROOM_RES::LEAVE_ROOM_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LEAVE_ROOM_RES)
}
LEAVE_ROOM_RES::LEAVE_ROOM_RES(const LEAVE_ROOM_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_name()) {
    var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  ::memcpy(&var_index_, &from.var_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_index_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:LEAVE_ROOM_RES)
}

void LEAVE_ROOM_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LEAVE_ROOM_RES_GS_2eCLI_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&var_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_code_) -
      reinterpret_cast<char*>(&var_index_)) + sizeof(var_code_));
  id_ = 9;
}

LEAVE_ROOM_RES::~LEAVE_ROOM_RES() {
  // @@protoc_insertion_point(destructor:LEAVE_ROOM_RES)
  SharedDtor();
}

void LEAVE_ROOM_RES::SharedDtor() {
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LEAVE_ROOM_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LEAVE_ROOM_RES& LEAVE_ROOM_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LEAVE_ROOM_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void LEAVE_ROOM_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:LEAVE_ROOM_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    var_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&var_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_code_) -
        reinterpret_cast<char*>(&var_index_)) + sizeof(var_code_));
    id_ = 9;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LEAVE_ROOM_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes var_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 var_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_var_index(&has_bits);
          var_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LEAVE_ROOM_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LEAVE_ROOM_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_RES];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional bytes var_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_var_name(), target);
  }

  // optional .ErrorCode var_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_var_code(), target);
  }

  // optional int64 var_index = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_var_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LEAVE_ROOM_RES)
  return target;
}

size_t LEAVE_ROOM_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LEAVE_ROOM_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes var_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_var_name());
    }

    // optional int64 var_index = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_var_index());
    }

    // optional .ErrorCode var_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_LEAVE_ROOM_RES];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LEAVE_ROOM_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LEAVE_ROOM_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const LEAVE_ROOM_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LEAVE_ROOM_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LEAVE_ROOM_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LEAVE_ROOM_RES)
    MergeFrom(*source);
  }
}

void LEAVE_ROOM_RES::MergeFrom(const LEAVE_ROOM_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LEAVE_ROOM_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      var_index_ = from.var_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LEAVE_ROOM_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LEAVE_ROOM_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LEAVE_ROOM_RES::CopyFrom(const LEAVE_ROOM_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LEAVE_ROOM_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LEAVE_ROOM_RES::IsInitialized() const {
  return true;
}

void LEAVE_ROOM_RES::InternalSwap(LEAVE_ROOM_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_index_, other->var_index_);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LEAVE_ROOM_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BROADCAST_ROOM_MESSAGE_RES::InitAsDefaultInstance() {
}
class BROADCAST_ROOM_MESSAGE_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<BROADCAST_ROOM_MESSAGE_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_x(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_var_y(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_var_color(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

BROADCAST_ROOM_MESSAGE_RES::BROADCAST_ROOM_MESSAGE_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BROADCAST_ROOM_MESSAGE_RES)
}
BROADCAST_ROOM_MESSAGE_RES::BROADCAST_ROOM_MESSAGE_RES(const BROADCAST_ROOM_MESSAGE_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_message()) {
    var_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_message_);
  }
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_name()) {
    var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:BROADCAST_ROOM_MESSAGE_RES)
}

void BROADCAST_ROOM_MESSAGE_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BROADCAST_ROOM_MESSAGE_RES_GS_2eCLI_2eproto.base);
  var_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&var_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_color_) -
      reinterpret_cast<char*>(&var_code_)) + sizeof(var_color_));
  id_ = 11;
}

BROADCAST_ROOM_MESSAGE_RES::~BROADCAST_ROOM_MESSAGE_RES() {
  // @@protoc_insertion_point(destructor:BROADCAST_ROOM_MESSAGE_RES)
  SharedDtor();
}

void BROADCAST_ROOM_MESSAGE_RES::SharedDtor() {
  var_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BROADCAST_ROOM_MESSAGE_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BROADCAST_ROOM_MESSAGE_RES& BROADCAST_ROOM_MESSAGE_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BROADCAST_ROOM_MESSAGE_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void BROADCAST_ROOM_MESSAGE_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:BROADCAST_ROOM_MESSAGE_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      var_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&var_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_color_) -
        reinterpret_cast<char*>(&var_code_)) + sizeof(var_color_));
    id_ = 11;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BROADCAST_ROOM_MESSAGE_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_BROADCAST_ROOM_MESSAGE_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes var_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_var_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes var_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_var_x(&has_bits);
          var_x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 var_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_var_y(&has_bits);
          var_y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .eTeam var_color = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::eTeam_IsValid(val))) {
            _internal_set_var_color(static_cast<::eTeam>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BROADCAST_ROOM_MESSAGE_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:BROADCAST_ROOM_MESSAGE_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_BROADCAST_ROOM_MESSAGE_RES];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  // optional bytes var_message = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_var_message(), target);
  }

  // optional bytes var_name = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_var_name(), target);
  }

  // optional int32 var_x = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_var_x(), target);
  }

  // optional int32 var_y = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_var_y(), target);
  }

  // optional .eTeam var_color = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_var_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BROADCAST_ROOM_MESSAGE_RES)
  return target;
}

size_t BROADCAST_ROOM_MESSAGE_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BROADCAST_ROOM_MESSAGE_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional bytes var_message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_var_message());
    }

    // optional bytes var_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_var_name());
    }

    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional int32 var_x = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_x());
    }

    // optional int32 var_y = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_var_y());
    }

    // optional .eTeam var_color = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_color());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_BROADCAST_ROOM_MESSAGE_RES];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BROADCAST_ROOM_MESSAGE_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BROADCAST_ROOM_MESSAGE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const BROADCAST_ROOM_MESSAGE_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BROADCAST_ROOM_MESSAGE_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BROADCAST_ROOM_MESSAGE_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BROADCAST_ROOM_MESSAGE_RES)
    MergeFrom(*source);
  }
}

void BROADCAST_ROOM_MESSAGE_RES::MergeFrom(const BROADCAST_ROOM_MESSAGE_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BROADCAST_ROOM_MESSAGE_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_message_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      var_x_ = from.var_x_;
    }
    if (cached_has_bits & 0x00000010u) {
      var_y_ = from.var_y_;
    }
    if (cached_has_bits & 0x00000020u) {
      var_color_ = from.var_color_;
    }
    if (cached_has_bits & 0x00000040u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BROADCAST_ROOM_MESSAGE_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BROADCAST_ROOM_MESSAGE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BROADCAST_ROOM_MESSAGE_RES::CopyFrom(const BROADCAST_ROOM_MESSAGE_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BROADCAST_ROOM_MESSAGE_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BROADCAST_ROOM_MESSAGE_RES::IsInitialized() const {
  return true;
}

void BROADCAST_ROOM_MESSAGE_RES::InternalSwap(BROADCAST_ROOM_MESSAGE_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_message_.Swap(&other->var_message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_code_, other->var_code_);
  swap(var_x_, other->var_x_);
  swap(var_y_, other->var_y_);
  swap(var_color_, other->var_color_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BROADCAST_ROOM_MESSAGE_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ROOM_LIST_RES::InitAsDefaultInstance() {
}
class ROOM_LIST_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<ROOM_LIST_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void ROOM_LIST_RES::clear_var_room_list() {
  var_room_list_.Clear();
}
ROOM_LIST_RES::ROOM_LIST_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ROOM_LIST_RES)
}
ROOM_LIST_RES::ROOM_LIST_RES(const ROOM_LIST_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_room_list_(from.var_room_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:ROOM_LIST_RES)
}

void ROOM_LIST_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ROOM_LIST_RES_GS_2eCLI_2eproto.base);
  var_code_ = 0;
  id_ = 14;
}

ROOM_LIST_RES::~ROOM_LIST_RES() {
  // @@protoc_insertion_point(destructor:ROOM_LIST_RES)
  SharedDtor();
}

void ROOM_LIST_RES::SharedDtor() {
}

void ROOM_LIST_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ROOM_LIST_RES& ROOM_LIST_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ROOM_LIST_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void ROOM_LIST_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:ROOM_LIST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_room_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_code_ = 0;
    id_ = 14;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ROOM_LIST_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .RoomInfo2 var_room_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_var_room_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROOM_LIST_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ROOM_LIST_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_RES];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  // repeated .RoomInfo2 var_room_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_var_room_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_var_room_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ROOM_LIST_RES)
  return target;
}

size_t ROOM_LIST_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ROOM_LIST_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .RoomInfo2 var_room_list = 3;
  total_size += 1UL * this->_internal_var_room_list_size();
  for (const auto& msg : this->var_room_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_ROOM_LIST_RES];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROOM_LIST_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ROOM_LIST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const ROOM_LIST_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ROOM_LIST_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ROOM_LIST_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ROOM_LIST_RES)
    MergeFrom(*source);
  }
}

void ROOM_LIST_RES::MergeFrom(const ROOM_LIST_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ROOM_LIST_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_room_list_.MergeFrom(from.var_room_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ROOM_LIST_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ROOM_LIST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROOM_LIST_RES::CopyFrom(const ROOM_LIST_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ROOM_LIST_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROOM_LIST_RES::IsInitialized() const {
  return true;
}

void ROOM_LIST_RES::InternalSwap(ROOM_LIST_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_room_list_.InternalSwap(&other->var_room_list_);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROOM_LIST_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MATCH_RES::InitAsDefaultInstance() {
}
class MATCH_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<MATCH_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MATCH_RES::MATCH_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MATCH_RES)
}
MATCH_RES::MATCH_RES(const MATCH_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:MATCH_RES)
}

void MATCH_RES::SharedCtor() {
  var_code_ = 0;
  id_ = 16;
}

MATCH_RES::~MATCH_RES() {
  // @@protoc_insertion_point(destructor:MATCH_RES)
  SharedDtor();
}

void MATCH_RES::SharedDtor() {
}

void MATCH_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MATCH_RES& MATCH_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MATCH_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void MATCH_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:MATCH_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_code_ = 0;
    id_ = 16;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MATCH_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_MATCH_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MATCH_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MATCH_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_MATCH_RES];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional .ErrorCode var_code = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_var_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MATCH_RES)
  return target;
}

size_t MATCH_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MATCH_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ErrorCode var_code = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_MATCH_RES];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MATCH_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MATCH_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const MATCH_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MATCH_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MATCH_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MATCH_RES)
    MergeFrom(*source);
  }
}

void MATCH_RES::MergeFrom(const MATCH_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MATCH_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MATCH_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MATCH_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MATCH_RES::CopyFrom(const MATCH_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MATCH_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MATCH_RES::IsInitialized() const {
  return true;
}

void MATCH_RES::InternalSwap(MATCH_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MATCH_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GAME_RESULT_NTY::InitAsDefaultInstance() {
}
class GAME_RESULT_NTY::_Internal {
 public:
  using HasBits = decltype(std::declval<GAME_RESULT_NTY>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_var_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_var_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

GAME_RESULT_NTY::GAME_RESULT_NTY()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GAME_RESULT_NTY)
}
GAME_RESULT_NTY::GAME_RESULT_NTY(const GAME_RESULT_NTY& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_var_name()) {
    var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
  }
  ::memcpy(&var_index_, &from.var_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_index_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:GAME_RESULT_NTY)
}

void GAME_RESULT_NTY::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GAME_RESULT_NTY_GS_2eCLI_2eproto.base);
  var_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&var_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&var_color_) -
      reinterpret_cast<char*>(&var_index_)) + sizeof(var_color_));
  id_ = 18;
}

GAME_RESULT_NTY::~GAME_RESULT_NTY() {
  // @@protoc_insertion_point(destructor:GAME_RESULT_NTY)
  SharedDtor();
}

void GAME_RESULT_NTY::SharedDtor() {
  var_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GAME_RESULT_NTY::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GAME_RESULT_NTY& GAME_RESULT_NTY::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GAME_RESULT_NTY_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void GAME_RESULT_NTY::Clear() {
// @@protoc_insertion_point(message_clear_start:GAME_RESULT_NTY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    var_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&var_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&var_color_) -
        reinterpret_cast<char*>(&var_index_)) + sizeof(var_color_));
    id_ = 18;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* GAME_RESULT_NTY::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_GAME_RESULT_NTY];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int64 var_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_var_index(&has_bits);
          var_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes var_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_var_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .eTeam var_color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::eTeam_IsValid(val))) {
            _internal_set_var_color(static_cast<::eTeam>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GAME_RESULT_NTY::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GAME_RESULT_NTY)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_GAME_RESULT_NTY];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // optional int64 var_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_var_index(), target);
  }

  // optional bytes var_name = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_var_name(), target);
  }

  // optional .ErrorCode var_code = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_var_code(), target);
  }

  // optional .eTeam var_color = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_var_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GAME_RESULT_NTY)
  return target;
}

size_t GAME_RESULT_NTY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GAME_RESULT_NTY)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes var_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_var_name());
    }

    // optional int64 var_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_var_index());
    }

    // optional .ErrorCode var_code = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .eTeam var_color = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_color());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_GAME_RESULT_NTY];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GAME_RESULT_NTY::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GAME_RESULT_NTY)
  GOOGLE_DCHECK_NE(&from, this);
  const GAME_RESULT_NTY* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GAME_RESULT_NTY>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GAME_RESULT_NTY)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GAME_RESULT_NTY)
    MergeFrom(*source);
  }
}

void GAME_RESULT_NTY::MergeFrom(const GAME_RESULT_NTY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GAME_RESULT_NTY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      var_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.var_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      var_index_ = from.var_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000008u) {
      var_color_ = from.var_color_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GAME_RESULT_NTY::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GAME_RESULT_NTY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GAME_RESULT_NTY::CopyFrom(const GAME_RESULT_NTY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GAME_RESULT_NTY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GAME_RESULT_NTY::IsInitialized() const {
  return true;
}

void GAME_RESULT_NTY::InternalSwap(GAME_RESULT_NTY* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_name_.Swap(&other->var_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(var_index_, other->var_index_);
  swap(var_code_, other->var_code_);
  swap(var_color_, other->var_color_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GAME_RESULT_NTY::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RANK_RES::InitAsDefaultInstance() {
}
class RANK_RES::_Internal {
 public:
  using HasBits = decltype(std::declval<RANK_RES>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_var_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void RANK_RES::clear_var_rank_list() {
  var_rank_list_.Clear();
}
RANK_RES::RANK_RES()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RANK_RES)
}
RANK_RES::RANK_RES(const RANK_RES& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      var_rank_list_(from.var_rank_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&var_code_, &from.var_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&var_code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:RANK_RES)
}

void RANK_RES::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RANK_RES_GS_2eCLI_2eproto.base);
  var_code_ = 0;
  id_ = 20;
}

RANK_RES::~RANK_RES() {
  // @@protoc_insertion_point(destructor:RANK_RES)
  SharedDtor();
}

void RANK_RES::SharedDtor() {
}

void RANK_RES::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RANK_RES& RANK_RES::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RANK_RES_GS_2eCLI_2eproto.base);
  return *internal_default_instance();
}


void RANK_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:RANK_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  var_rank_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    var_code_ = 0;
    id_ = 20;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RANK_RES::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .PROTOCOL id = 1 [default = ID_PKT_RANK_RES];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::PROTOCOL_IsValid(val))) {
            _internal_set_id(static_cast<::PROTOCOL>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .Rank var_rank_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_var_rank_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .ErrorCode var_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ErrorCode_IsValid(val))) {
            _internal_set_var_code(static_cast<::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RANK_RES::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RANK_RES)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .PROTOCOL id = 1 [default = ID_PKT_RANK_RES];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_id(), target);
  }

  // repeated .Rank var_rank_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_var_rank_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_var_rank_list(i), target, stream);
  }

  // optional .ErrorCode var_code = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_var_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RANK_RES)
  return target;
}

size_t RANK_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RANK_RES)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Rank var_rank_list = 2;
  total_size += 1UL * this->_internal_var_rank_list_size();
  for (const auto& msg : this->var_rank_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .ErrorCode var_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_var_code());
    }

    // optional .PROTOCOL id = 1 [default = ID_PKT_RANK_RES];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RANK_RES::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RANK_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const RANK_RES* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RANK_RES>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RANK_RES)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RANK_RES)
    MergeFrom(*source);
  }
}

void RANK_RES::MergeFrom(const RANK_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RANK_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  var_rank_list_.MergeFrom(from.var_rank_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      var_code_ = from.var_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RANK_RES::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RANK_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RANK_RES::CopyFrom(const RANK_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RANK_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RANK_RES::IsInitialized() const {
  return true;
}

void RANK_RES::InternalSwap(RANK_RES* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  var_rank_list_.InternalSwap(&other->var_rank_list_);
  swap(var_code_, other->var_code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RANK_RES::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::VERSION_RES* Arena::CreateMaybeMessage< ::VERSION_RES >(Arena* arena) {
  return Arena::CreateInternal< ::VERSION_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::LOGIN_RES* Arena::CreateMaybeMessage< ::LOGIN_RES >(Arena* arena) {
  return Arena::CreateInternal< ::LOGIN_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::CREATE_ROOM_RES* Arena::CreateMaybeMessage< ::CREATE_ROOM_RES >(Arena* arena) {
  return Arena::CreateInternal< ::CREATE_ROOM_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::ENTER_ROOM_RES* Arena::CreateMaybeMessage< ::ENTER_ROOM_RES >(Arena* arena) {
  return Arena::CreateInternal< ::ENTER_ROOM_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::NEW_USER_IN_ROOM_NTY* Arena::CreateMaybeMessage< ::NEW_USER_IN_ROOM_NTY >(Arena* arena) {
  return Arena::CreateInternal< ::NEW_USER_IN_ROOM_NTY >(arena);
}
template<> PROTOBUF_NOINLINE ::LEAVE_ROOM_RES* Arena::CreateMaybeMessage< ::LEAVE_ROOM_RES >(Arena* arena) {
  return Arena::CreateInternal< ::LEAVE_ROOM_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::BROADCAST_ROOM_MESSAGE_RES* Arena::CreateMaybeMessage< ::BROADCAST_ROOM_MESSAGE_RES >(Arena* arena) {
  return Arena::CreateInternal< ::BROADCAST_ROOM_MESSAGE_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::ROOM_LIST_RES* Arena::CreateMaybeMessage< ::ROOM_LIST_RES >(Arena* arena) {
  return Arena::CreateInternal< ::ROOM_LIST_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::MATCH_RES* Arena::CreateMaybeMessage< ::MATCH_RES >(Arena* arena) {
  return Arena::CreateInternal< ::MATCH_RES >(arena);
}
template<> PROTOBUF_NOINLINE ::GAME_RESULT_NTY* Arena::CreateMaybeMessage< ::GAME_RESULT_NTY >(Arena* arena) {
  return Arena::CreateInternal< ::GAME_RESULT_NTY >(arena);
}
template<> PROTOBUF_NOINLINE ::RANK_RES* Arena::CreateMaybeMessage< ::RANK_RES >(Arena* arena) {
  return Arena::CreateInternal< ::RANK_RES >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
